﻿﻿@model Tabang_Hub.Utils.Lists

@{
    ViewBag.Title = "VolunteerManagement";
    Layout = "~/Views/Shared/_Organization.cshtml";
}

<style>
    .added-skills {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
        margin-top: 10px;
    }

    .skill-item {
        display: flex;
        align-items: center;
        border: 1px solid #ced4da;
        border-radius: 5px;
        padding: 5px 10px;
        background-color: #f8f9fa;
    }

        .skill-item .remove-skill {
            margin-left: 5px;
            color: red;
            cursor: pointer;
        }

    .skill-count {
        width: 60px;
        margin-left: 10px;
    }

    .content-section {
        display: none;
    }

        .content-section.active {
            display: block;
        }

    .fixed-size-img {
        width: 100%;
        max-height: 450px;
        object-fit: cover;
    }

    .profile-img {
        width: 100px;
        height: 100px;
        object-fit: cover;
        border-radius: 50%;
    }

    .profile-card {
        padding: 15px;
        border: 1px solid #ced4da;
        border-radius: 5px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        background-color: white;
    }

    .skills-container {
        display: flex;
        flex-wrap: wrap;
        gap: 5px;
        margin-top: 10px;
    }

    .skill-button {
        padding: 3px 8px;
        font-size: 12px;
        border: 1px solid #ced4da;
        border-radius: 5px;
        background-color: #f8f9fa;
        cursor: pointer;
    }

        .skill-button.selected {
            background-color: #007bff;
            color: white;
            border-color: #007bff;
        }

        .skill-button:disabled {
            cursor: not-allowed;
            background-color: #e9ecef;
        }

    .list-group-item {
        display: flex;
        align-items: center;
        border: 1px solid #ced4da;
        border-radius: 5px;
        margin-bottom: 10px;
        box-shadow: 0 0 5px rgba(0, 0, 0, 0.1);
    }

        .list-group-item .badge {
            font-size: 0.75em;
        }

    .progress {
        height: 30px;
        background-color: #e9ecef;
        border-radius: 15px;
        overflow: hidden;
        box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.1);
        position: relative;
    }

    .progress-bar {
        background-color: #007bff;
        line-height: 30px;
        color: white;
        text-align: center;
        transition: width 0.6s ease;
    }

    .progress-text {
        position: absolute;
        width: 100%;
        height: 100%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: bold;
        color: black;
        z-index: 2;
    }

    .progress-bar-container {
        position: relative;
    }

    .edit-button {
        position: absolute;
        top: 10px;
        right: 10px;
    }
</style>
<link href="~/Content/Css/ViewVolunteerModal.css" rel="stylesheet" />
<link href="~/Content/Css/invitation.css" rel="stylesheet" />
@if (Model.eventDetails.dateEnd > DateTime.Now)
{
    <div class="container mt-5">
        <!-- Navigation Tabs -->
        <ul class="nav nav-pills mb-4 justify-content-center" id="eventTabs" role="tablist">
            <li class="nav-item" role="presentation">
                <button class="nav-link active" id="organization-details-tab" data-bs-toggle="tab" data-bs-target="#organization-details" type="button" role="tab" aria-controls="organization-details" aria-selected="true">Details</button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="volunteer-list-tab" data-bs-toggle="tab" data-bs-target="#volunteer-list" type="button" role="tab" aria-controls="volunteer-list" aria-selected="false">Invite Volunteer</button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="invite-volunteer-tab" data-bs-toggle="tab" data-bs-target="#invite-volunteer" type="button" role="tab" aria-controls="invite-volunteer" aria-selected="false">
                    Volunteer List
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="applied-volunteer-list-tab" data-bs-toggle="tab" data-bs-target="#applied-volunteer-list" type="button" role="tab" aria-controls="applied-volunteer-list" aria-selected="false">Applied Volunteer List</button>
            </li>
        </ul>

        <!-- Organization Profile Section -->
        <div class="tab-content" id="eventTabsContent">
            <div class="tab-pane fade show active" id="organization-details" role="tabpanel" aria-labelledby="organization-details-tab">
                <div class="row mb-4">
                    <div class="col-md-12">
                        <div class="profile-card d-flex align-items-center">
                            <img src="@Url.Content("~/Content/images/tabanghub3.png")" class="profile-img me-3" alt="Organization Profile">
                            <div>
                                <h4>@Model.OrgInfo.orgName</h4>
                                <p>@Model.OrgInfo.orgDescription</p>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Event Details -->
                <div class="row d-flex align-items-stretch">
                    <div class="col-md-6">
                        <div class="card h-100">
                            <div class="card-body d-flex flex-column">
                                <div id="carouselExampleFade" class="carousel slide carousel-fade flex-grow-1" data-bs-ride="carousel">
                                    <ol class="carousel-indicators">
                                        @for (int i = 0; i < Model.detailsEventImage.Count; i++)
                                        {
                                            <li data-bs-target="#carouselExampleFade" data-bs-slide-to="@i" class="@(i == 0 ? "active" : "")"></li>
                                        }
                                    </ol>
                                    <div class="carousel-inner h-100">
                                        @for (int i = 0; i < Model.detailsEventImage.Count; i++)
                                        {
                                            <div class="carousel-item @(i == 0 ? "active" : "") h-100">
                                                <img src="@Url.Content("~/Content/Events/" + Model.detailsEventImage[i].eventImage)" class="d-block w-100 h-100" alt="Event Image @i" style="height: 400px; object-fit: cover; object-position: center;" />
                                            </div>
                                        }
                                    </div>
                                    <a class="carousel-control-prev" href="#carouselExampleFade" role="button" data-bs-slide="prev">
                                        <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                                        <span class="visually-hidden">Previous</span>
                                    </a>
                                    <a class="carousel-control-next" href="#carouselExampleFade" role="button" data-bs-slide="next">
                                        <span class="carousel-control-next-icon" aria-hidden="true"></span>
                                        <span class="visually-hidden">Next</span>
                                    </a>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="card h-100">
                            <div class="card-header d-flex justify-content-between align-items-center">
                                <h5 class="card-title mb-0">Event Details</h5>
                                @if (Model.eventDetails.dateStart >= DateTime.Now)
                                {
                                    <button class="btn btn-outline-primary edit-button" data-bs-toggle="modal" data-bs-target="#createEventModal">Edit</button>
                                }
                            </div>
                            <div class="card-body d-flex flex-column">
                                <ul class="list-group list-group-flush flex-grow-1">
                                    <h5 class="card-title">@Model.eventDetails.eventTitle</h5>
                                    <p class="card-text">@Model.eventDetails.eventDescription</p>
                                    <li class="list-group-item d-flex align-items-center">
                                        <i class="bi bi-calendar-event text-primary me-2"></i>
                                        <strong class="me-2">Start Date:</strong>
                                        <span>
                                            @(Model.eventDetails.dateStart.HasValue ? Model.eventDetails.dateStart.Value.ToString("MMMM dd, yyyy - h:mm tt") : "N/A")
                                        </span>
                                    </li>
                                    <li class="list-group-item d-flex align-items-center">
                                        <i class="bi bi-calendar-x text-danger me-2"></i>
                                        <strong class="me-2">End Date:</strong>
                                        <span>
                                            @(Model.eventDetails.dateEnd.HasValue ? Model.eventDetails.dateEnd.Value.ToString("MMMM dd, yyyy - h:mm tt") : "N/A")
                                        </span>
                                    </li>

                                    <li class="list-group-item"><i class="bi bi-geo-alt me-2"></i><strong>Location:</strong> @Model.eventDetails.location</li>
                                </ul>
                            </div>

                            <div class="row d-flex align-items-stretch">
                                <!-- Volunteers Section -->
                                <div class="col-md-6">
                                    <div class="card h-100">
                                        <div class="card-body">
                                            <h5 class="card-title">Volunteers</h5>
                                            @* Calculate the current volunteer count *@
                                            @{
                                                int currentVolunteers = Model.listOfEventVolunteers.Count(v => v.Status == 1);
                                                int maxVolunteers = (int)Model.eventDetails.maxVolunteer;
                                                var volunteerPercentage = (maxVolunteers > 0) ? ((double)currentVolunteers / maxVolunteers) * 100 : 0;
                                            }
                                            <div class="progress-bar-container mb-2">
                                                <div class="progress">
                                                    <div class="progress-bar" role="progressbar" style="width: @volunteerPercentage%"></div>
                                                    <div class="progress-text">@($"{currentVolunteers}/{maxVolunteers}")</div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <!-- Target Amount Section -->
                                @if (Model.eventDetails.targetAmount != null)
                                {
                                    <div class="col-md-6">
                                        <div class="card h-100">
                                            <div class="card-body">
                                                <h5 class="card-title">Target Amount</h5>
                                                @* Calculate the raised amount *@
                                                @{
                                                    decimal? raisedAmount = 0;

                                                    foreach (var donated in Model.listofUserDonated)
                                                    {
                                                        if (donated.Status == 1)
                                                        {
                                                            raisedAmount += donated.amount;
                                                        }
                                                    }

                                                    var percentage = (raisedAmount / Model.eventDetails.targetAmount) * 100;
                                                }
                                                <div class="progress-bar-container">
                                                    <div class="progress">
                                                        <div class="progress-bar" role="progressbar" style="width: @percentage%" aria-valuenow="@raisedAmount" aria-valuemin="0" aria-valuemax="@Model.eventDetails.targetAmount"></div>
                                                        <div class="progress-text">
                                                            @($"{raisedAmount:₱#,##0.00}") / @($"{Model.eventDetails.targetAmount:₱#,##0.00}")
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                            <div class="card-body">
                                <h5 class="card-title">Skills Needed</h5>
                                <div class="skills-container" id="skills-container">
                                    @foreach (var skill in Model.detailsSkillRequirement)
                                    {
                                        <button type="button" class="skill-button" data-skill-id="@skill.skillRequirementId">@skill.Skills.skillName</button>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            @{
                var processedUsers1 = new HashSet<int>(); // To track processed user IDs
            }

            <!-- Volunteer List Section -->
            <div class="tab-pane fade" id="volunteer-list" role="tabpanel" aria-labelledby="volunteer-list-tab">
                <div class="row mb-4">
                    <div class="col-md-12">
                        <div class="card">
                            <div class="card-header">
                                <h1 class="card-title">@Model.eventDetails.eventTitle</h1>
                                <label class="placeholder"><strong>Skills Required</strong></label>
                                <div class="skills-container mt-2" id="skills-container">
                                    @foreach (var skill in Model.detailsSkillRequirement)
                                    {
                                        <button type="button" class="skill-button" data-skill-id="@skill.skillRequirementId">@skill.Skills.skillName</button>
                                    }
                                </div>
                            </div>
                            <div class="card-body">
                                <div class="row">
                                    <!-- Table Section -->
                                    <div class="col-md-8">
                                        <div class="table-controls mb-3 d-flex align-items-center gap-3">
                                            <!-- Search Box -->
                                            <input type="text" class="form-control form-control-sm search-box" placeholder="Search..." id="search-box">

                                            <!-- Availability Dropdown -->
                                            <select class="form-select form-select-sm" id="dropdownAvailability" aria-label="Availability">
                                                <option selected value="">Availability</option>
                                                <option id="fulltime" value="Full Time">Full Time</option>
                                                <option id="parttime" value="Part Time">Part Time</option>
                                            </select>

                                            <!-- Ratings Checkbox -->
                                            <div class="form-check form-check-inline">
                                                <input class="form-check-input" type="checkbox" id="ratings-checkbox">
                                                <label class="form-check-label" for="ratings-checkbox">Ratings</label>
                                            </div>

                                            <!-- Select All Checkbox -->
                                            <div class="form-check form-check-inline align-items-center">
                                                <input class="form-check-input" type="checkbox" id="select-all-users">
                                                <label class="form-check-label d-inline" for="select-all-users" style="font-size: 0.8rem; white-space: nowrap;">Select All</label>
                                            </div>
                                        </div>

                                        <div class="table-responsive">
                                            <table class="table table-striped table-hover">
                                                <thead>
                                                    <tr>
                                                        <th scope="col">Name</th>
                                                        <th scope="col">Skills</th>
                                                        <th scope="col">Rating</th>
                                                        <th scope="col">Availability</th>
                                                        <th scope="col">View details</th>
                                                        <th scope="col">Select</th>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    <!-- Rows will be dynamically inserted here by JavaScript -->
                                                </tbody>
                                            </table>
                                        </div>
                                    </div>

                                    <!-- Skills Section -->
                                    <div class="col-md-4">
                                        <div class="skills-container">
                                            <div class="skills-header">
                                                <h6>Skills Required</h6>
                                            </div>
                                            <div class="dropdown-container">
                                                <div class="dropdown-header" id="dropdown-header">
                                                    <div class="dropdown-tags" id="dropdown-tags">
                                                        <label class="placeholder">Select Skills Required</label>
                                                    </div>
                                                    <div class="dropdown-arrow" id="dropdown-arrow">&#9662;</div>
                                                </div>

                                                <input type="hidden" id="event-Id" value="@Model.eventDetails.eventId">
                                                <ul class="dropdown-list" id="dropdown-list">
                                                    <li>
                                                        <label>
                                                            <input type="checkbox" id="select-all-option"> Select All
                                                        </label>
                                                    </li>

                                                    @foreach (var Reqskills in Model.detailsSkillRequirement)
                                                    {
                                                        <li>
                                                            <label>
                                                                <input class="skill-checkbox" type="checkbox" data-selectedid="@Reqskills.Skills.skillId" value="@Reqskills.Skills.skillName"> @Reqskills.Skills.skillName
                                                            </label>
                                                        </li>
                                                    }
                                                </ul>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="text-end mt-4">
                                        <button class="btn btn-success btn-sm" onclick="inviteVolunteer()">Invite Volunteers</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="modal fade" id="detailsModal" tabindex="-1" role="dialog" aria-labelledby="detailsModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered" role="document">
                    <div class="modal-content">
                        <!-- Header -->
                        <div class="modal-header text-white" style="background-color: mediumseagreen;">
                            <h5 class="modal-title" id="detailsModalLabel">Volunteer Profile</h5>
                        </div>

                        <!-- Body -->
                        <div class="modal-body">
                            <!-- Profile Section -->
                            <div class="text-center mb-4">
                                <div class="profile-container">
                                    <img id="modalProfilePic" src="" alt="Profile Picture" class="rounded-circle img-thumbnail shadow" style="display: none;">
                                    <i id="modalProfileIcon" class="bi bi-person-circle" style="font-size: 120px; color: #6c757d; display: none;"></i>
                                </div>
                                <h4 class="mt-3" id="modalFullName" style="font-weight: bold; color: #343a40;">Full Name</h4>
                                <p class="text-muted mb-0" id="modalAvailability">Full Time</p>
                            </div>

                            <!-- Details Section -->
                            <div class="info-section px-3 py-2">
                                <div class="info-row">
                                    <span class="info-label">Birthday:</span>
                                    <span class="info-value" id="modalBirthDay">Not Available</span>
                                </div>
                                <div class="info-row">
                                    <span class="info-label">Phone Number:</span>
                                    <span class="info-value" id="modalPhoneNum">Not Available</span>
                                </div>
                                <div class="info-row">
                                    <span class="info-label">Address:</span>
                                    <span class="info-value" id="modalAddress">Not Available</span>
                                </div>
                                <div class="info-row">
                                    <span class="info-label">About:</span>
                                    <span class="info-value" id="modalAbout">Not Available</span>
                                </div>
                                <div class="info-row">
                                    <span class="info-label">Skills:</span>
                                    <span id="modalSkills" class="badge-container"></span>
                                </div>
                                <div class="info-row">
                                    <span class="info-label">Rating:</span>
                                    <span class="info-value">
                                        <span id="modalAverageRate">0.0</span>
                                        <span id="modalStars" class="stars"></span>
                                    </span>
                                </div>
                            </div>
                        </div>

                        <!-- Footer -->
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" id="modalCloseButton">Close</button>
                        </div>
                    </div>
                </div>
            </div>



            <script>
                function inviteVolunteer() {
    const selectedVolunteerIds = [];
    const eventId = @Model.eventDetails.eventId;
    $('.user-checkbox:checked').each(function () {
        const volunteerId = $(this).data('volunteerid');
        if (volunteerId) {
            selectedVolunteerIds.push(volunteerId);
        }
    });

    if (selectedVolunteerIds.length === 0) {
        Swal.fire({
            icon: 'warning',
            title: 'No Volunteers Selected',
            text: 'Please select at least one volunteer to invite.',
            confirmButtonText: 'OK'
        });
        return;
    }

    $.ajax({
        url: '/Organization/InviteVolunteer',
        type: 'POST',
        data: { selectedVolunteers: selectedVolunteerIds, eventId: eventId },
        success: function (response) {
            if (response.success) {
                const alreadyJoinedCount = response.alreadyJoinedUsers.length;
                const alreadyInvitedCount = response.alreadyInvitedUsers.length;
                const newlyInvitedCount = response.newlyInvitedUsers.length;

                let message = `<p>${newlyInvitedCount} volunteer(s) have been successfully invited.</p>`;
                if (alreadyJoinedCount > 0) {
                    message += `<p>${alreadyJoinedCount} volunteer(s) have already joined this event.</p>`;
                }
                if (alreadyInvitedCount > 0) {
                    message += `<p>${alreadyInvitedCount} volunteer(s) were already invited.</p>`;
                }

                Swal.fire({
                    icon: 'success',
                    title: 'Invitation Results',
                    html: message,
                    confirmButtonText: 'OK'
                });
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: response.message || 'An error occurred while processing invitations.',
                    confirmButtonText: 'OK'
                });
            }
        },
        error: function (error) {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'An unexpected error occurred. Please try again.',
                confirmButtonText: 'OK'
            });
        }
    });
}

                // Search functionality
                $(document).on('input', '#search-box', function () {
                    const searchTerm = $(this).val().toLowerCase(); // Get the search term and convert to lowercase
                    const tableRows = $('table tbody tr'); // Select all table rows

                    tableRows.each(function () {
                        const rowText = $(this).text().toLowerCase(); // Get the text content of the row and convert to lowercase

                        if (rowText.includes(searchTerm)) {
                            $(this).show(); // Show the row if it matches the search term
                        } else {
                            $(this).hide(); // Hide the row if it doesn't match the search term
                        }
                    });

                    console.log("Search Term:", searchTerm); // Log the search term for debugging
                });
            </script>
            <script>
                document.addEventListener('DOMContentLoaded', function () {
                    checkRating();
                });

                // Global flag for Ratings checkbox state
                let isRatingsChecked = false;
                $(document).on('change', '#dropdownAvailability', function () {
                    const selectedAvailability = $(this).val(); // Get the selected availability option
                    const selectedSkills = getSelectedSkills();
                    const eventId = document.getElementById('event-Id').value;

                    console.log("Selected Availability:", selectedAvailability);
                    fetchVolunteers(selectedSkills, eventId, selectedAvailability);
                });

                // Function to check ratings and log displayed volunteers

                function checkRating() {
                    $(document).on('change', '#ratings-checkbox', function () {
                        isRatingsChecked = $(this).is(':checked'); // Update the state of the Ratings checkbox

                        // Uncheck the "Select All" checkbox
                        $('#select-all-users').prop('checked', false);

                        const selectedSkills = getSelectedSkills();
                        const selectedAvailability = $('#dropdownAvailability').val();
                        const eventId = document.getElementById('event-Id').value;

                        console.log("Ratings checkbox state:", isRatingsChecked);
                        fetchVolunteers(selectedSkills, eventId, selectedAvailability);
                    });
                }

                function fetchVolunteers(selectedSkills = [], eventId = null, selectedAvailability = "") {
                    // Assume the entire list of volunteers is fetched and stored in a global variable
                    let apiUrl = '/Organization/FilterSkill'; // Default API

                    // Determine API URL based on the selected filters
                    if (selectedAvailability && selectedSkills.length > 0 && isRatingsChecked) {
                        apiUrl = '/Organization/FilterByRateWithAvailabilityAndSkills'; // Ratings + Availability + Skills
                    } else if (selectedSkills.length > 0 && isRatingsChecked) {
                        apiUrl = '/Organization/FilterBySkillsAndRatings'; // Ratings + skill
                    } else if (selectedAvailability && isRatingsChecked) {
                        apiUrl = '/Organization/FilterByRatingsWithAvailability'; // Ratings + Availability
                    } else if (selectedAvailability && selectedSkills.length > 0) {
                        apiUrl = '/Organization/FilterByAvailabilityWithSkill'; // Availability + Skills
                    } else if (selectedAvailability) {
                        apiUrl = '/Organization/FilterByAvailability'; // Only Availability
                    } else if (isRatingsChecked) {
                        apiUrl = '/Organization/FilterRate'; // Only Ratings
                    } else if (selectedSkills.length > 0) {
                        apiUrl = '/Organization/FilterSkill'; // Only Skills
                    }

                    console.log(`Fetching from API: ${apiUrl}`);
                    console.log("Selected Skills:", selectedSkills);
                    console.log("Selected Availability:", selectedAvailability);
                    console.log("Event ID:", eventId);

                    $.ajax({
                        url: apiUrl,
                        type: 'POST',
                        contentType: 'application/json',
                        data: JSON.stringify({ skillId: selectedSkills, eventId: eventId, availability: selectedAvailability }),
                        success: function (response) {
                            if (response.success) {
                                // Store fetched data globally
                                /*window.volunteerData = response.volunteers;*/
                                console.log("Response: ", response.volunteers);

                                updateVolunteerTable(response.volunteers);
                            } else {
                                console.error("Error fetching volunteers:", response.message);
                            }
                        },
                        error: function (error) {
                            console.error("Error in AJAX request:", error);
                        }
                    });
                }

                // Function to update the table with volunteer data
                function updateVolunteerTable(volunteers) {
                    const tableBody = document.querySelector('table tbody');
                    tableBody.innerHTML = ''; // Clear existing rows

                    volunteers.forEach(volunteer => {
                        const skills = volunteer.Skills.join(", ");
                        const rating = volunteer.OverallRating === 0
                            ? "No Rate"
                            : (volunteer.OverallRating % 1 === 0
                                ? volunteer.OverallRating
                                : volunteer.OverallRating.toFixed(2));
                        const row = `
                                                                 <tr>
                                                                     <td>${volunteer.FullName}</td>
                                                                     <td>${skills}</td>
                                                                     <td>${rating}</td>
                                                                     <td>${volunteer.Availability}</td>
                                                                     <td><button class="btn btn-outline-secondary view-button"
                                                                         data-volunteerid="${volunteer.UserId}">View</button></td>

                                                                     <td><input type="checkbox" class="user-checkbox"
                                                                         data-volunteerid="${volunteer.UserId}"
                                                                             value="${volunteer.UserId}"></td>
                                                                 </tr>
                                                             `;
                        tableBody.insertAdjacentHTML('beforeend', row);
                    });
                    console.log("Table updated with volunteers.");
                }


                document.addEventListener("click", (event) => {
                    if (event.target.classList.contains("view-button")) {
                        const userId = event.target.getAttribute("data-volunteerid");
                        console.log("Fetching info for userId:", userId);
                        const eventId = @Model.eventDetails.eventId;

                        // AJAX request to retrieve volunteer info
                        $.ajax({
                            url: '/Organization/GetVolunteerInfo', // Adjust URL as needed
                            type: 'POST',
                            data: { userId: userId, eventId: eventId }, // Pass the userId to the backend
                            success: function (response) {
                                if (response.success) {
                                    // Display volunteer data in the modal
                                    console.log("Test");
                                    displayModal(response.volunteer);
                                } else {
                                    // Handle cases where the volunteer is not found
                                    alert(response.message || "Volunteer not found.");
                                }
                            },
                            error: function (xhr, status, error) {
                                console.error("AJAX Error:", error);
                            }
                        });
                    }
                });


                function displayModal(volunteer) {
                    const profilePicElement = document.getElementById("modalProfilePic");
                    const profileIconElement = document.getElementById("modalProfileIcon");
                    const modalSkillsContainer = document.getElementById("modalSkills");
                    const modalStarsContainer = document.getElementById("modalStars");

                    // Handle Profile Picture
                    if (volunteer.ProfilePic) {
                        profilePicElement.src = `/Content/UserProfile/${volunteer.ProfilePic}`;
                        profilePicElement.style.display = "block";
                        profileIconElement.style.display = "none";
                    } else {
                        profilePicElement.style.display = "none";
                        profileIconElement.style.display = "block";
                    }

                    // Validate and Format Birthday
                    let formattedBirthDay = "Not Available";
                    if (volunteer.BirthDay) {
                        try {
                            const date = new Date(volunteer.BirthDay);
                            if (!isNaN(date.getTime())) {
                                formattedBirthDay = date.toLocaleDateString("en-US", {
                                    year: "numeric",
                                    month: "long",
                                    day: "numeric",
                                });
                            }
                        } catch (error) {
                            console.error("Error parsing BirthDay:", error);
                        }
                    }

                    // Populate Modal Fields
                    document.getElementById("modalFullName").textContent = volunteer.FullName || "N/A";
                    document.getElementById("modalBirthDay").textContent = formattedBirthDay;
                    document.getElementById("modalPhoneNum").textContent = volunteer.PhoneNum || "Not Available";
                    document.getElementById("modalAddress").textContent = `${volunteer.Street || ''}, ${volunteer.City || ''}, ${volunteer.Province || ''} ${volunteer.Zip || ''}`.trim() || "Not Available";
                    document.getElementById("modalAbout").textContent = volunteer.About || "Not Available";
                    document.getElementById("modalAverageRate").textContent = volunteer.AverageRate !== undefined ? volunteer.AverageRate.toFixed(1) : "0.0";
                    document.getElementById("modalAvailability").textContent = volunteer.Availability || "Not Available";
                    // Populate Skills as Badges
                    modalSkillsContainer.innerHTML = "";
                    if (volunteer.Skills && volunteer.Skills.length > 0) {
                        volunteer.Skills.forEach(skill => {
                            const skillBadge = document.createElement("span");
                            skillBadge.className = "badge";
                            skillBadge.textContent = skill;
                            modalSkillsContainer.appendChild(skillBadge);
                        });
                    } else {
                        modalSkillsContainer.textContent = "Not Available";
                    }

                    // Populate Rating as Stars
                    modalStarsContainer.innerHTML = "";
                    const fullStars = Math.floor(volunteer.AverageRate || 0); // Number of full stars
                    const hasHalfStar = (volunteer.AverageRate || 0) % 1 >= 0.5; // Check if half-star is needed
                    const totalStars = 5;

                    for (let i = 0; i < totalStars; i++) {
                        const star = document.createElement("i");
                        if (i < fullStars) {
                            star.className = "bi bi-star-fill"; // Full star
                        } else if (i === fullStars && hasHalfStar) {
                            star.className = "bi bi-star-half"; // Half star
                        } else {
                            star.className = "bi bi-star"; // Empty star
                        }
                        modalStarsContainer.appendChild(star);
                    }

                    // Show the modal
                    $('#detailsModal').modal('show');
                }

                document.getElementById("modalCloseButton").addEventListener("click", function () {
                    $('#detailsModal').modal('hide'); // Close the modal when clicking the Close button
                });


                // Automatically load all volunteers when the page is ready
                $(document).ready(function () {
                    const eventId = document.getElementById('event-Id').value;
                    fetchVolunteers([], eventId, ""); // No skills selected, fetch all volunteers
                });

                // Handle "Select All" checkbox changes
                $(document).on('change', '#select-all-option', function () {
                    const isChecked = $(this).is(':checked');
                    const selectedSkills = [];
                    const eventId = document.getElementById('event-Id').value;

                    // Toggle all individual checkboxes based on the "Select All" state
                    $('.skill-checkbox').prop('checked', isChecked);

                    if (isChecked) {
                        // Collect all skill IDs from individual checkboxes
                        $('.skill-checkbox').each(function () {
                            const skillId = $(this).data('selectedid');
                            if (skillId) selectedSkills.push(skillId);
                        });
                    }

                    console.log("Selected Skills (Select All): ", selectedSkills);
                    const selectedAvailability = $('#dropdownAvailability').val();
                    // Fetch volunteers based on the updated skill selection
                    fetchVolunteers(selectedSkills, eventId, selectedAvailability);
                });

                $(document).on('change', '.skill-checkbox', function () {
                    const selectedSkills = getSelectedSkills();
                    const selectedAvailability = $('#dropdownAvailability').val();
                    const eventId = document.getElementById('event-Id').value;

                    if (selectedSkills.length > 0) {
                        $('#dropdown-tags .placeholder').hide(); // Hide the placeholder
                    } else {
                        $('#dropdown-tags .placeholder').show(); // Show the placeholder
                    }

                    fetchVolunteers(selectedSkills, eventId, selectedAvailability);
                });


                // Helper function to get selected skills
                function getSelectedSkills() {
                    const selectedSkills = [];
                    $('.skill-checkbox:checked').each(function () {
                        const skillId = $(this).data('selectedid');
                        if (skillId) selectedSkills.push(skillId);
                    });
                    return selectedSkills;
                }

                // Handle tag removal (clicking the "x" on a skill tag)
                $(document).on('click', '.remove-tag', function () {
                    const skillId = $(this).data('value'); // Skill ID associated with the tag
                    const eventId = document.getElementById('event-Id').value;

                    // Uncheck the corresponding checkbox
                    $(`.skill-checkbox[data-selectedid='${skillId}']`).prop('checked', false);

                    // Update the "Select All" checkbox state
                    const allChecked = $('.skill-checkbox').length === $('.skill-checkbox:checked').length;
                    $('#select-all-option').prop('checked', allChecked);

                    const selectedAvailability = $('#dropdownAvailability').val();
                    // Update the selected skills
                    const selectedSkills = getSelectedSkills();
                    fetchVolunteers(selectedSkills, eventId, selectedAvailability); // Fetch volunteers based on the updated skill selection
                });
            </script>



            <script>
                // Track if all checkboxes are currently selected in User
                let isAllSelected = false;

                // Event listener for the "Select All" checkbox

                document.getElementById("select-all-users").addEventListener("change", function () {
                    const isChecked = this.checked; // Check if "Select All" is checked
                    document.querySelectorAll(".user-checkbox").forEach(checkbox => {
                        checkbox.checked = isChecked; // Toggle all checkboxes
                    });
                });

                // Function to log all currently selected volunteer IDs
                function logSelectedVolunteers() {
                    const selectedVolunteerIds = [];
                    $('.user-checkbox:checked').each(function () {
                        const volunteerId = $(this).data('volunteerid');
                        if (volunteerId) {
                            selectedVolunteerIds.push(volunteerId);
                        }
                    });
                    console.log("Currently Selected Volunteer IDs:", selectedVolunteerIds);

                }

                // Log individual volunteer selection changes and update the "Select All" state
                $(document).on('change', '.user-checkbox', function () {
                    logSelectedVolunteers();
                    updateSelectAllState(); // Update "Select All" checkbox state
                });



                function updateSelectAllState() {
                    const checkboxes = document.querySelectorAll(".user-checkbox");
                    const selectAllCheckbox = document.getElementById("select-all-users");

                    // Check if all individual checkboxes are checked
                    const allChecked = Array.from(checkboxes).every(checkbox => checkbox.checked);
                    // Update the "Select All" checkbox state
                    selectAllCheckbox.checked = allChecked;
                }

                $(document).on('change', '.user-checkbox', function () {
                    updateSelectAllState(); // Update "Select All" checkbox state when any individual checkbox changes
                });


                const dropdownHeader = document.getElementById("dropdown-header");
                const dropdownList = document.getElementById("dropdown-list");
                const dropdownTags = document.getElementById("dropdown-tags");
                const selectAllOption = document.getElementById("select-all-option");
                const placeholder = document.querySelector(".placeholder");

                // Toggle dropdown list
                dropdownHeader.addEventListener("click", () => {
                    dropdownList.style.display = dropdownList.style.display === "block" ? "none" : "block";
                });

                // Update dropdown with selected options
                document.querySelectorAll("#dropdown-list input[type='checkbox']").forEach((checkbox) => {
                    checkbox.addEventListener("change", (e) => {
                        if (e.target.id === "select-all-option") {
                            handleSelectAll(e.target.checked); // Handle "Select All" behavior
                        } else {
                            updateTags();
                            updateSelectAllState(); // Update "Select All" state if any individual checkbox changes
                        }
                    });
                });

                // Handle "Select All" functionality
                function handleSelectAll(isChecked) {
                    document.querySelectorAll("#dropdown-list input[type='checkbox']").forEach((checkbox) => {
                        if (checkbox.id !== "select-all-option") {
                            checkbox.checked = isChecked; // Check or uncheck individual skill checkboxes
                        }
                    });
                    updateTags(); // Update the displayed tags
                }

                // Update the "Select All" checkbox state
                function updateSelectAllState() {
                    const allChecked = Array.from(
                        document.querySelectorAll("#dropdown-list input[type='checkbox']")
                    )
                        .filter((checkbox) => checkbox.id !== "select-all-option") // Exclude "Select All" from the count
                        .every((checkbox) => checkbox.checked); // Check if all individual checkboxes are checked

                    selectAllOption.checked = allChecked; // Update "Select All" state
                }

                // Update tags based on selected options
                function updateTags() {
                    const selectedValues = Array.from(
                        document.querySelectorAll("#dropdown-list input[type='checkbox']:checked")
                    )
                        .filter((checkbox) => checkbox.id !== "select-all-option") // Exclude "Select All" from tags
                        .map((checkbox) => checkbox.value);

                    // Show or hide placeholder based on selection
                    if (selectedValues.length === 0) {
                        placeholder.style.display = "inline"; // Show placeholder
                    } else {
                        placeholder.style.display = "none"; // Hide placeholder
                    }

                    // Clear existing tags
                    dropdownTags.querySelectorAll("span").forEach((tag) => tag.remove());

                    // Add selected skill tags
                    selectedValues.forEach((value) => {
                        const tag = document.createElement("span");
                        tag.innerHTML = `${value} <i class="remove-tag" data-value="${value}">x</i>`;
                        dropdownTags.appendChild(tag);
                    });

                    // Attach event listeners to remove tags
                    document.querySelectorAll(".remove-tag").forEach((removeBtn) => {
                        removeBtn.addEventListener("click", (e) => {
                            const value = e.target.getAttribute("data-value");
                            document.querySelector(`#dropdown-list input[value='${value}']`).checked = false; // Uncheck the corresponding checkbox
                            updateTags(); // Update tags after removal
                            updateSelectAllState(); // Update "Select All" state
                        });
                    });
                }

            </script>

            @{
                var processedUsers = new HashSet<int>(); // To track processed user IDs
            }

            <!-- Applied Volunteer List Section -->
            <div class="tab-pane fade" id="applied-volunteer-list" role="tabpanel" aria-labelledby="applied-volunteer-list-tab">
                <div class="row mb-4">
                    <div class="col-md-12">
                        <div class="card">
                            <div class="card-header">
                                <h5 class="card-title">Applied Volunteer List</h5>
                            </div>
                            <div class="card-body">
                                <div class="table-responsive">
                                    <table class="table table-striped table-hover">
                                        <thead>
                                            <tr>
                                                <th scope="col">Profile Image</th>
                                                <th scope="col">Email</th>
                                                <th scope="col">Skills</th>
                                                <th scope="col">Ratings</th>
                                                <th scope="col">Actions</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var volunteer in Model.listOfEventVolunteers)
                                            {
                                                if (volunteer.Status == 0 && !processedUsers.Contains((int)volunteer.userId))
                                                {
                                                    processedUsers.Add((int)volunteer.userId); // Mark the user as processed

                                                    // Prepare separate strings for skills and ratings
                                                    var skillsHtml = new System.Text.StringBuilder();
                                                    var ratingsHtml = new System.Text.StringBuilder();
                                                    var userSkills = Model.volunteersSkills.Where(s => s.userId == volunteer.userId).ToList();

                                                    // List to hold all ratings for calculating the volunteer's overall average rating
                                                    List<double> allRatings = new List<double>();

                                                    foreach (var skill in userSkills)
                                                    {
                                                        foreach (var req in Model.eventDetails.OrgSkillRequirement)
                                                        {
                                                            if (skill.skillId == req.skillId)
                                                            {
                                                                // Collect ratings for this skill
                                                                var skillRatings = Model.listOfRatings
                                                                    .Where(rate => rate.userId == skill.userId)
                                                                    .Select(rate => (double)rate.rate)
                                                                    .ToList();

                                                                allRatings.AddRange(skillRatings);

                                                                // Append the skill name
                                                                skillsHtml.Append($"<div>{skill.Skills.skillName}</div>");
                                                            }
                                                        }
                                                    }

                                                    // Calculate the average rating across all collected ratings
                                                    double averageRating = allRatings.Any() ? allRatings.Average() : 0;
                                                    int fullStars = (int)averageRating;
                                                    int halfStars = averageRating % 1 >= 0.5 ? 1 : 0;

                                                    // Build star icons for the overall average rating
                                                    for (int i = 0; i < fullStars; i++)
                                                    {
                                                        ratingsHtml.Append("<i class='bi bi-star-fill' style='color: gold;'></i>");
                                                    }
                                                    if (halfStars > 0)
                                                    {
                                                        ratingsHtml.Append("<i class='bi bi-star-half' style='color: gold;'></i>");
                                                    }
                                                    for (int i = 0; i < 5 - (fullStars + halfStars); i++)
                                                    {
                                                        ratingsHtml.Append("<i class='bi bi-star' style='color: gold;'></i>");
                                                    }

                                                    // Render the table row with volunteer details, matched skills, and their rating
                                                    <tr>
                                                        <td>
                                                            <img src="@Url.Content("~/Content/images/organization.png")" class="profile-img" alt="Volunteer Image" style="width: 50px; height: 50px; border-radius: 50%;">
                                                        </td>
                                                        <td>@volunteer.UserAccount.email</td>
                                                        <td>@Html.Raw(skillsHtml.ToString())</td>
                                                        <td>@Html.Raw(ratingsHtml.ToString())</td>
                                                        <td>
                                                            <div class="d-flex gap-2">
                                                                <a href="@Url.Action("VolunteerDetails", "Organization", new { userId = volunteer.userId, eventId = Model.eventDetails.eventId })" class="btn btn-outline-primary btn-sm">View</a>
                                                                <button type="button" class="btn btn-outline-success btn-sm accept-btn" data-id="@volunteer.userId" data-event-id="@volunteer.eventId">Accept</button>
                                                                <button type="button" class="btn btn-outline-danger btn-sm decline-btn" data-id="@volunteer.userId" data-event-id="@volunteer.eventId">Decline</button>
                                                            </div>
                                                        </td>
                                                    </tr>
                                                }
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            @{
                var processedUsers3 = new HashSet<int>(); // To track processed user IDs
            }

            <div class="tab-pane fade" id="invite-volunteer" role="tabpanel" aria-labelledby="invite-volunteer-tab">
                <div class="row mb-4">
                    <div class="col-md-12">
                        <div class="card">
                            <div class="card-header">
                                <h5 class="card-title">Volunteer List</h5>
                            </div>
                            <div class="card-body">
                                <div class="table-responsive">
                                    <table class="table table-striped table-hover">
                                        <thead>
                                            <tr>
                                                <th scope="col">Profile Image</th>
                                                <th scope="col">Email</th>
                                                <th scope="col">Skills</th>
                                                <th scope="col">Ratings</th>
                                                <th scope="col">Actions</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var volunteer in Model.listOfEventVolunteers)
                                            {
                                                if (volunteer.Status == 1 && !processedUsers3.Contains((int)volunteer.userId))
                                                {
                                                    processedUsers3.Add((int)volunteer.userId); // Mark the user as processed

                                                    // Prepare separate strings for skills and ratings
                                                    var skillsHtml = new System.Text.StringBuilder();
                                                    var ratingsHtml = new System.Text.StringBuilder();
                                                    var userSkills = Model.volunteersSkills.Where(s => s.userId == volunteer.userId).ToList();

                                                    // List to hold all ratings for calculating the volunteer's overall average rating
                                                    List<int> allRatings = new List<int>();

                                                    foreach (var skill in userSkills)
                                                    {
                                                        foreach (var req in Model.eventDetails.OrgSkillRequirement)
                                                        {
                                                            if (skill.skillId == req.skillId)
                                                            {
                                                                // Collect ratings for this skill
                                                                var skillRatings = Model.listOfRatings
                                                                    .Where(rate => rate.userId == skill.userId && rate.skillId == skill.skillId)
                                                                    .Select(rate => (int)rate.rate)
                                                                    .ToList();

                                                                allRatings.AddRange(skillRatings);

                                                                // Append the skill name
                                                                skillsHtml.Append($"<div>{skill.Skills.skillName}</div>");
                                                            }
                                                        }
                                                    }

                                                    // Calculate the average rating across all collected ratings
                                                    double averageRating = allRatings.Any() ? allRatings.Average() : 0;
                                                    int fullStars = (int)averageRating;
                                                    int halfStars = averageRating % 1 >= 0.5 ? 1 : 0;

                                                    // Build star icons for the overall average rating
                                                    for (int i = 0; i < fullStars; i++)
                                                    {
                                                        ratingsHtml.Append("<i class='bi bi-star-fill' style='color: gold;'></i>");
                                                    }
                                                    if (halfStars > 0)
                                                    {
                                                        ratingsHtml.Append("<i class='bi bi-star-half' style='color: gold;'></i>");
                                                    }
                                                    for (int i = 0; i < 5 - (fullStars + halfStars); i++)
                                                    {
                                                        ratingsHtml.Append("<i class='bi bi-star' style='color: gold;'></i>");
                                                    }

                                                    // Render the table row with volunteer details, matched skills, and their rating
                                                    <tr>
                                                        <td>
                                                            <img src="@Url.Content("~/Content/images/organization.png")" class="profile-img" alt="Volunteer Image" style="width: 50px; height: 50px; border-radius: 50%;">
                                                        </td>
                                                        <td>@volunteer.UserAccount.email</td>
                                                        <td>@Html.Raw(skillsHtml.ToString())</td>
                                                        <td>@Html.Raw(ratingsHtml.ToString())</td>
                                                        <td>
                                                            <div class="d-flex gap-2">
                                                                <a href="@Url.Action("VolunteerDetails", "Organization", new { userId = volunteer.userId, eventId = Model.eventDetails.eventId })" class="btn btn-outline-primary btn-sm">View</a>
                                                                <button type="button" class="btn btn-outline-danger btn-sm remove-btn" data-id="@volunteer.userId" data-event-id="@Model.eventDetails.eventId">Remove</button>
                                                            </div>
                                                        </td>
                                                    </tr>
                                                }
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Edit Event Modal -->
            <!--<div class="modal fade" id="editEventModal" tabindex="-1" aria-labelledby="editEventModalLabel" aria-hidden="true" data-bs-backdrop="static">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">-->
            <!-- Modal Header -->
            <!--<div class="modal-header">
                <h5 class="modal-title" id="editEventModalLabel">Edit Event</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>-->
            <!-- Modal Body -->
            <!--<div class="modal-body">
            <form id="edit-event-form" method="post" enctype="multipart/form-data" action="@Url.Action("EditEvent", "Organization")" onsubmit="validateEditForm(event)">-->
            <!-- Event ID -->
            <!--<input id="eventIdNi" type="hidden" name="eventId" value="@Model.eventDetails.eventId" />-->
            <!-- Event Title -->
            <!--<div class="mb-3">
                <label for="EditEvent_eventTitle" class="form-label">Event Title</label>
                <input type="text" class="form-control" id="EditEvent_eventTitle" name="events.CreateEvents.eventTitle" value="@Model.eventDetails.eventTitle" placeholder="Enter event title">
                <span class="error text-danger" id="EditEvent_eventTitle_error"></span>
            </div>-->
            <!-- Event Description -->
            <!--<div class="mb-3">
                <label for="EditEvent_eventDescription" class="form-label">Event Description</label>
                <textarea class="form-control" id="EditEvent_eventDescription" name="events.CreateEvents.eventDescription" rows="4" placeholder="Enter event description">@Model.eventDetails.eventDescription</textarea>
                <span class="error text-danger" id="EditEvent_eventDescription_error"></span>
            </div>-->
            <!-- Target Amount -->
            <!--<div class="mb-3">
                <div class="form-check form-switch">
                    <input class="form-check-input" type="checkbox" id="editSwitchCheckDefault" onchange="toggleTargetAmount(this)" @(Model.eventDetails.targetAmount != null ? "checked" : "")>
                    <label class="form-check-label" for="editSwitchCheckDefault">Enable Target Amount</label>
                </div>
                <input type="text" class="form-control mt-2" id="EditEvent_targetAmount" name="events.CreateEvents.targetAmount" value="@(Model.eventDetails.targetAmount?.ToString() ?? "")" placeholder="Enter target amount in Peso" @(Model.eventDetails.targetAmount == null ? "disabled" : "")>
                <span class="error text-danger" id="EditEvent_targetAmount_error"></span>
            </div>-->
            <!-- Dates -->
            <!--<div class="mb-3 row">
                <div class="col">
                    <label for="EditEvent_dateStart" class="form-label">Start Date and Time</label>
                    <input type="datetime-local" class="form-control" id="EditEvent_dateStart" name="events.CreateEvents.dateStart" value="@(Model.eventDetails.dateStart.HasValue ? Model.eventDetails.dateStart.Value.ToString("yyyy-MM-ddTHH:mm") : "")">
                    <span class="error text-danger" id="EditEvent_dateStart_error"></span>
                </div>
                <div class="col">
                    <label for="EditEvent_dateEnd" class="form-label">End Date and Time</label>
                    <input type="datetime-local" class="form-control" id="EditEvent_dateEnd" name="events.CreateEvents.dateEnd" value="@(Model.eventDetails.dateEnd.HasValue ? Model.eventDetails.dateEnd.Value.ToString("yyyy-MM-ddTHH:mm") : "")">
                    <span class="error text-danger" id="EditEvent_dateEnd_error"></span>
                </div>
            </div>-->
            <!-- Map for selecting location -->
            <!--<div class="mb-3">
                <div id="map" style="height: 400px;"></div>
            </div>-->
            <!-- Location -->
            <!--<div class="mb-3">
                <label for="EditEvent_location" class="form-label">Location</label>
                <input type="text" class="form-control" id="EditEvent_location" name="events.CreateEvents.location" value="@Model.eventDetails.location" placeholder="Enter location">
                <span class="error text-danger" id="EditEvent_location_error"></span>
            </div>-->
            <!-- Maximum Volunteers -->
            <!--<div class="mb-3">
                <label for="EditEvent_maxVolunteer" class="form-label">Maximum Volunteers</label>
                <input type="number" class="form-control" id="EditEvent_maxVolunteer" name="events.CreateEvents.maxVolunteer" min="1" value="@Model.eventDetails.maxVolunteer" placeholder="Enter maximum number of volunteers">
                <span class="error text-danger" id="EditEvent_maxVolunteer_error"></span>
            </div>
            <div id="skillsToRemoveContainer"></div>-->
            <!-- Volunteer Skills Requirements -->
            <!--<div class="mb-3">
                <label>Volunteer Skills Requirements</label>
                <div class="table-responsive" style="max-height: 200px; overflow-y: auto;">
                    <table class="table table-bordered">
                        <thead class="table-light">
                            <tr>
                                <th>Skill</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody id="edit-skills-table-body">
                            @foreach (var skill in Model.detailsSkillRequirement)
                            {
                                <tr data-skill="@skill.Skills.skillName">
                                    <td>@skill.Skills.skillName</td>
                                    <td>
                                        <button type="button" class="btn btn-danger btn-sm" onclick="removeEditSkillFromTable('@skill.Skills.skillName', this)">Remove</button>
                                        <input type="hidden" name="skills" value="@skill.Skills.skillName" />
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                <span class="error text-danger" id="EditEvent_skills_error"></span>
            </div>-->
            <!-- Skill Buttons to Add Skills -->
            <!--<div class="skills-container mb-3">
                @foreach (var skills in Model.listOfSkills)
                {
                    var isSkillAdded = Model.detailsSkillRequirement.Any(s => s.Skills.skillName == skills.skillName);
                    <button type="button" class="btn btn-outline-primary skill-button" onclick="addEditSkillToTable('@skills.skillName')" id="edit-skill-@skills.skillName" @(isSkillAdded ? "disabled" : "")>@skills.skillName</button>
                }
            </div>-->
            <!-- Upload Images -->
            <!--<div class="mb-3">
                <label for="EditEvent_uploadImage" class="form-label">Upload Images</label>
                <input type="file" class="form-control" id="EditEvent_uploadImage" name="images" multiple onchange="previewEditImages()">
                <span class="error text-danger" id="EditEvent_uploadImage_error"></span>
                <div class="preview-container" id="edit-image-preview"></div>
            </div>-->
            <!-- Submit Button -->
            <!--<button class="btn btn-primary" type="submit">Save Changes</button>
                            </form>
                        </div>
                    </div>
                </div>
            </div>-->
            <!-- Create Event Modal -->
            <div class="modal fade" id="createEventModal" tabindex="-1" aria-labelledby="createEventModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-lg modal-dialog-scrollable">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="createEventModalLabel">Edit Event</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <form>
                                <!-- Updated Event Name -->
                                <div class="mb-3">
                                    <label for="eventName" class="form-label">Event Name</label>
                                    <input type="text" class="form-control" id="eventName" value="@Model.eventDetails.eventTitle" placeholder="Enter event name" required>
                                    <span class="text-danger" id="eventNameError"></span>
                                </div>

                                <!-- Updated Description -->
                                <div class="mb-3">
                                    <label for="eventDescription" class="form-label">Description</label>
                                    <textarea class="form-control" id="eventDescription" rows="3" placeholder="Enter event description" required>@Model.eventDetails.eventDescription</textarea>
                                    <span class="text-danger" id="eventDescriptionError"></span>
                                </div>

                                <!-- Allow Donation Switch -->
                                <div class="form-check form-switch mb-3">
                                    <input class="form-check-input" type="checkbox" id="allowDonation">
                                    <label class="form-check-label" for="allowDonation">Allow Donation</label>
                                    <input type="hidden" id="donationAllowed" name="donationAllowed" value="0">
                                </div>

                                <!-- Updated Maximum Volunteers -->
                                <div class="mb-3">
                                    <label for="maxVolunteers" class="form-label">Maximum Volunteers</label>
                                    <input type="number" class="form-control" value="@Model.eventDetails.maxVolunteer" id="maxVolunteers" placeholder="Enter maximum number of volunteers" required>
                                    <span class="text-danger" id="maxVolunteersError"></span>
                                </div>

                                <!-- Updated Start Date and Time and End Date and Time -->
                                <div class="row">
                                    <!-- Start Date -->
                                    <div class="col-md-6 mb-3">
                                        <label for="dateStart" class="form-label">Start Date and Time</label>
                                        <input type="datetime-local" class="form-control" value="@(Model.eventDetails.dateStart.HasValue ? Model.eventDetails.dateStart.Value.ToString("yyyy-MM-ddTHH:mm") : "")" id="dateStart" required>
                                        <span class="text-danger" id="dateStartError"></span>
                                    </div>
                                    <!-- End Date -->
                                    <div class="col-md-6 mb-3">
                                        <label for="dateEnd" class="form-label">End Date and Time</label>
                                        <input type="datetime-local" class="form-control" value="@(Model.eventDetails.dateEnd.HasValue ? Model.eventDetails.dateEnd.Value.ToString("yyyy-MM-ddTHH:mm") : "")" id="dateEnd" required>
                                        <span class="text-danger" id="dateEndError"></span>
                                    </div>
                                </div>

                                <!-- Map for Location -->
                                <div class="mb-3">
                                    <label for="eventLocation" class="form-label">Location</label>
                                    <div id="map" style="height: 300px; border: 1px solid #ddd;">Map of Lapu-Lapu City will appear here.</div>
                                </div>

                                <!-- Input for Location Name -->
                                <div class="mb-3">
                                    <label for="locationName" class="form-label">Selected Location</label>
                                    <input type="text" class="form-control" value="@Model.eventDetails.location" id="locationName" placeholder="Click on the map to select a location" readonly>
                                    <span class="text-danger" id="locationNameError"></span>
                                </div>

                                <!-- Selected Skills Table -->
                                <div class="mb-3">
                                    <label class="form-label">Selected Skills</label>
                                    <div class="table-responsive overflow-auto" style="max-height: 150px;">
                                        <!-- Limit height to approximately 3 rows -->
                                        <table class="table table-striped table-hover table-bordered">
                                            <thead>
                                                <tr>
                                                    <th>Skill Name</th>
                                                    <th>Action</th>
                                                </tr>
                                            </thead>
                                            <tbody id="selectedSkillsTable">
                                                <!-- Dynamically added rows will appear here -->
                                                @foreach (var skill in Model.detailsSkillRequirement)
                                                {
                                                    <tr data-skill-id="@skill.Skills.skillId" data-skill-name="@skill.Skills.skillName">
                                                        <td class="skill-name">@skill.Skills.skillName</td>
                                                        <td>
                                                            <button type="button" class="btn btn-danger btn-sm remove-skill-btn">Remove</button>
                                                            <input type="hidden" name="skills" value="@skill.Skills.skillName" />
                                                        </td>
                                                    </tr>
                                                }
                                            </tbody>
                                        </table>
                                        <span class="text-danger" id="selectedSkillsError"></span>
                                    </div>
                                </div>

                                <!-- Skills Selection -->
                                <div class="mb-3">
                                    <label class="form-label">Skills</label>
                                    <div id="skillButtonsContainer">
                                        @if (Model.listOfSkills != null && Model.listOfSkills.Any())
                                        {
                                            foreach (var skillItem in Model.listOfSkills)
                                            {
                                                <button type="button" class="btn btn-sm btn-outline-primary m-1 skill-button"
                                                        data-skill-id="@skillItem.skillId" data-skill-name="@skillItem.skillName">
                                                    @skillItem.skillName
                                                </button>
                                            }
                                        }
                                        else
                                        {
                                            <p class="text-muted">No skills available.</p>
                                        }
                                    </div>
                                </div>

                                <!-- Image Upload -->
                                <div class="mb-3">
                                    <label for="eventImages" class="form-label">Upload Images</label>
                                    <input type="file" class="form-control" id="eventImages" multiple accept="image/*">
                                    <span class="text-danger" id="eventImagesError"></span>
                                    <div id="imagePreviewContainer" class="d-flex flex-wrap mt-3">
                                        <!-- Preview images will be displayed here -->
                                    </div>
                                </div>

                                <!-- Submit Button -->
                                <div class="mt-3 text-end">
                                    <button type="button" class="btn btn-primary" id="createEventBtn">Edit Event</button>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Invite Volunteer Modal -->
        <!--<div class="modal fade" id="inviteVolunteerModal" tabindex="-1" aria-labelledby="inviteVolunteerModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="inviteVolunteerModalLabel">Invite Volunteers</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <form id="inviteForm" action="@Url.Action("InviteVolunteer", "Organization")" method="post">-->
        <!-- Hidden input to pass eventId -->
        <!--<input type="hidden" name="eventId" value="@Model.eventDetails.eventId" />-->
        <!-- Filter Dropdown -->
        <!--<div class="mb-3">
            <label for="filterBy" class="form-label">Filter Volunteers By</label>
            <select class="form-select" id="filterBy" name="filterBy">
                <option value="Rating">Rating</option>
                <option value="Availability">Availability</option>
            </select>
        </div>-->
        <!-- Matched Volunteers by Rating -->
        <!--<div class="mb-3 volunteer-list" id="volunteersByRating">
            <label class="form-label">Select Volunteers to Invite (By Rating)</label>
            <div class="table-responsive">
                <table class="table table-striped table-hover">
                    <thead>
                        <tr>
                            <th scope="col">Name</th>
                            <th scope="col">Rating</th>
                            <th scope="col">Select</th>
                        </tr>
                    </thead>
                    <tbody>
                        foreach (var volunteerRateRank in Model.matchedSkills)
                        {
                            var userFName = Model.volunteersInfo.Where(m => m.userId == volunteerRateRank.userId).Select(m => m.fName).FirstOrDefault();
                            var userLName = Model.volunteersInfo.Where(m => m.userId == volunteerRateRank.userId).Select(m => m.lName).FirstOrDefault();
                            var getRate = Model.filteredVolunteers.Where(m => m.userId == volunteerRateRank.userId).Select(m => m.rating).FirstOrDefault();
                            var formattedRate = getRate > 0 ? Math.Floor(getRate * 10) / 10 : 0;

                            <tr>
                                <td>userLName, userFName</td>
                                <td>formattedRate</td>
                                <td>
                                    <input class="form-check-input rating-checkbox" type="checkbox" name="selectedVolunteers" value="volunteerRateRank.userId" id="volunteerRating_volunteerRateRank.userId">
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>-->
        <!-- Matched Volunteers by Availability -->
        <!--<div class="mb-3 volunteer-list" id="volunteersByAvailability" style="display: none;">
            <label class="form-label">Select Volunteers to Invite (By Availability)</label>
            <div class="table-responsive">
                <table class="table table-striped table-hover">
                    <thead>
                        <tr>
                            <th scope="col">Name</th>
                            <th scope="col">Availability</th>
                            <th scope="col">Select</th>
                        </tr>
                    </thead>
                    <tbody>
                        foreach (var volunteerAvailRank in Model.volunteerAvail)
                        {
                            var userFName = Model.volunteersInfo.Where(m => m.userId == volunteerAvailRank.userId).Select(m => m.fName).FirstOrDefault();
                            var userLName = Model.volunteersInfo.Where(m => m.userId == volunteerAvailRank.userId).Select(m => m.lName).FirstOrDefault();
                            var getAvail = Model.filteredVolunteers.Where(m => m.userId == volunteerAvailRank.userId).Select(m => m.Availability).FirstOrDefault();

                            <tr>
                                <td>userLName, userFName</td>
                                <td>getAvail</td>
                                <td>
                                    <input class="form-check-input availability-checkbox" type="checkbox" name="selectedVolunteers" value="volunteerAvailRank.userId" id="volunteerAvailability_volunteerAvailRank.userId">
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>-->
        <!-- Submit Button -->
        <!--<button type="submit" class="btn btn-primary">Send Invites</button>
                        </form>
                    </div>
                </div>
            </div>
        </div>-->
    </div>
}
else
{
    <div class="container mt-5">
        <ul class="nav nav-tabs mb-4" id="eventTabs" role="tablist">
            <li class="nav-item" role="presentation">
                <button class="nav-link active" id="organization-details-tab" data-bs-toggle="tab" data-bs-target="#organization-details" type="button" role="tab" aria-controls="organization-details" aria-selected="true">Details</button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="volunteer-list-tab" data-bs-toggle="tab" data-bs-target="#volunteer-list" type="button" role="tab" aria-controls="volunteer-list" aria-selected="false">Volunteer List</button>
            </li>
        </ul>

        <!-- Organization Profile Section -->
        <div class="tab-content" id="eventTabsContent">
            <div class="tab-pane fade show active" id="organization-details" role="tabpanel" aria-labelledby="organization-details-tab">
                <div class="row mb-4">
                    <div class="col-md-12">
                        <div class="profile-card d-flex align-items-center">
                            <img src="@Url.Content("~/Content/images/tabanghub3.png")" class="profile-img me-3" alt="Organization Profile">
                            <div>
                                <h4>@Model.OrgInfo.orgName</h4>
                                <p>@Model.OrgInfo.orgDescription</p>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Event Details -->
                <div class="row d-flex align-items-stretch">
                    <div class="col-md-6">
                        <div class="card h-100">
                            <div class="card-body d-flex flex-column">
                                <div id="carouselExampleFade" class="carousel slide carousel-fade flex-grow-1" data-bs-ride="carousel">
                                    <ol class="carousel-indicators">
                                        @for (int i = 0; i < Model.detailsEventImage.Count; i++)
                                        {
                                            <li data-bs-target="#carouselExampleFade" data-bs-slide-to="@i" class="@(i == 0 ? "active" : "")"></li>
                                        }
                                    </ol>
                                    <div class="carousel-inner h-100">
                                        @for (int i = 0; i < Model.detailsEventImage.Count; i++)
                                        {
                                            <div class="carousel-item @(i == 0 ? "active" : "") h-100">
                                                <img src="@Url.Content("~/Content/Events/" + Model.detailsEventImage[i].eventImage)" class="d-block w-100 h-100" alt="Event Image @i" style="height: 400px; object-fit: cover; object-position: center;" />
                                            </div>
                                        }
                                    </div>
                                    <a class="carousel-control-prev" href="#carouselExampleFade" role="button" data-bs-slide="prev">
                                        <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                                        <span class="visually-hidden">Previous</span>
                                    </a>
                                    <a class="carousel-control-next" href="#carouselExampleFade" role="button" data-bs-slide="next">
                                        <span class="carousel-control-next-icon" aria-hidden="true"></span>
                                        <span class="visually-hidden">Next</span>
                                    </a>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="card h-100">
                            <div class="card-header d-flex justify-content-between align-items-center">
                                <h5 class="card-title mb-0">Event Details</h5>
                            </div>
                            <div class="card-body d-flex flex-column">
                                <ul class="list-group list-group-flush flex-grow-1">
                                    <h5 class="card-title">@Model.eventDetails.eventTitle</h5>
                                    <p class="card-text">@Model.eventDetails.eventDescription</p>
                                    <li class="list-group-item d-flex align-items-center">
                                        <i class="bi bi-calendar-event text-primary me-2"></i>
                                        <strong class="me-2">Start Date:</strong>
                                        <span>
                                            @(Model.eventDetails.dateStart.HasValue ? Model.eventDetails.dateStart.Value.ToString("MMMM dd, yyyy - h:mm tt") : "N/A")
                                        </span>
                                    </li>
                                    <li class="list-group-item d-flex align-items-center">
                                        <i class="bi bi-calendar-x text-danger me-2"></i>
                                        <strong class="me-2">End Date:</strong>
                                        <span>
                                            @(Model.eventDetails.dateEnd.HasValue ? Model.eventDetails.dateEnd.Value.ToString("MMMM dd, yyyy - h:mm tt") : "N/A")
                                        </span>
                                    </li>

                                    <li class="list-group-item"><i class="bi bi-geo-alt me-2"></i><strong>Location:</strong> @Model.eventDetails.location</li>
                                </ul>
                            </div>

                            <div class="row d-flex align-items-stretch">
                                <!-- Volunteers Section -->
                                <div class="col-md-6">
                                    <div class="card h-100">
                                        <div class="card-body">
                                            <h5 class="card-title">Volunteers</h5>
                                            @* Calculate the current volunteer count *@
                                            @{
                                                int currentVolunteers = Model.listOfEventVolunteers.Count(v => v.Status == 1);
                                                int maxVolunteers = (int)Model.eventDetails.maxVolunteer;
                                                var volunteerPercentage = (maxVolunteers > 0) ? ((double)currentVolunteers / maxVolunteers) * 100 : 0;
                                            }
                                            <div class="progress-bar-container mb-2">
                                                <div class="progress">
                                                    <div class="progress-bar" role="progressbar" style="width: @volunteerPercentage%"></div>
                                                    <div class="progress-text">@($"{currentVolunteers}/{maxVolunteers}")</div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <!-- Target Amount Section -->
                                @if (Model.eventDetails.targetAmount != null)
                                {
                                    <div class="col-md-6">
                                        <div class="card h-100">
                                            <div class="card-body">
                                                <h5 class="card-title">Target Amount</h5>
                                                @* Calculate the raised amount *@
                                                @{
                                                    decimal? raisedAmount = 0;

                                                    foreach (var donated in Model.listofUserDonated)
                                                    {
                                                        if (donated.Status == 1)
                                                        {
                                                            raisedAmount += donated.amount;
                                                        }
                                                    }

                                                    var percentage = (raisedAmount / Model.eventDetails.targetAmount) * 100;
                                                }
                                                <div class="progress-bar-container">
                                                    <div class="progress">
                                                        <div class="progress-bar" role="progressbar" style="width: @percentage%" aria-valuenow="@raisedAmount" aria-valuemin="0" aria-valuemax="@Model.eventDetails.targetAmount"></div>
                                                        <div class="progress-text">
                                                            @($"{raisedAmount:₱#,##0.00}") / @($"{Model.eventDetails.targetAmount:₱#,##0.00}")
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                            <div class="card-body">
                                <h5 class="card-title">Skills Needed</h5>
                                <div class="skills-container" id="skills-container">
                                    @foreach (var skill in Model.detailsSkillRequirement)
                                    {
                                        <button type="button" class="skill-button" data-skill-id="@skill.skillRequirementId">@skill.Skills.skillName</button>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Volunteer List Section for Finished Events -->
            <div class="tab-pane fade" id="volunteer-list" role="tabpanel" aria-labelledby="volunteer-list-tab">
                <div class="row mb-4">
                    <div class="col-md-12">
                        <div class="card">
                            <div class="card-header d-flex justify-content-between align-items-center">
                                <h5 class="card-title">Volunteer List (Finished Event)</h5>
                                <div class="ratings-legend">
                                    <p class="text-muted mb-0"><strong>Rating Legend:</strong> 5 - Highest, 1 - Lowest</p>
                                </div>
                            </div>
                            <div class="card-body">
                                <div class="table-responsive">
                                    <table class="table table-striped table-hover">
                                        <thead>
                                            <tr>
                                                <th scope="col">Profile Image</th>
                                                <th scope="col">Email</th>
                                                <th scope="col">Skills</th>
                                                <th scope="col">Ratings per Skill</th>
                                                @*<th scope="col">Feedback</th>*@
                                                <th scope="col">Attendance</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var volunteer in Model.listofvolunteerHistory)
                                            {
                                                <tr>
                                                    <td>
                                                        <img src="@Url.Content("~/Content/images/organization.png")" class="profile-img" alt="Volunteer Image" style="width: 50px; height: 50px; border-radius: 50%;">
                                                    </td>
                                                    <td>@volunteer.UserAccount.email</td>
                                                    <td>
                                                        @foreach (var skill in Model.volunteersSkills.Where(s => s.userId == volunteer.userId))
                                                        {
                                                            foreach (var skillreq in Model.skillRequirement1)
                                                            {
                                                                if (skill.skillId == skillreq.skillId)
                                                                {
                                                                    <div>@skill.Skills.skillName</div>
                                                                }
                                                            }
                                                        }
                                                    </td>
                                                    <td>
                                                        @foreach (var skill in Model.volunteersSkills.Where(s => s.userId == volunteer.userId))
                                                        {
                                                            foreach (var skillreq in Model.skillRequirement1)
                                                            {
                                                                if (skill.skillId == skillreq.skillId)
                                                                {
                                                                    <div>
                                                                        <div class="d-inline-block">
                                                                            @for (int i = 1; i <= 5; i++)
                                                                            {
                                                                                <div class="form-check form-check-inline">
                                                                                    <input class="form-check-input" type="radio"
                                                                                           name="rating_@(volunteer.userId)_@(skill.skillId)"
                                                                                           id="rating_@(volunteer.userId)_@(skill.skillId)_@i"
                                                                                           value="@i" required>
                                                                                    <label class="form-check-label" for="rating_(@volunteer.userId)_(@skill.skillId)_@i">@i</label>
                                                                                </div>
                                                                            }
                                                                        </div>
                                                                    </div>
                                                                }
                                                            }
                                                        }
                                                    </td>
                                                    @*<td>
                                                            <div class="form-group">
                                                                <textarea class="form-control" name="feedback_@volunteer.userId" rows="2" placeholder="Enter feedback here..."></textarea>
                                                            </div>
                                                        </td>*@
                                                    <td>
                                                        <div class="form-group d-flex align-items-center">
                                                            <label class="me-2"><strong>Attendance:</strong></label>
                                                            <div class="form-check me-2">
                                                                <input class="form-check-input" type="radio" name="attendance_@volunteer.userId" value="1" required>
                                                                <label class="form-check-label">Yes</label>
                                                            </div>
                                                            <div class="form-check">
                                                                <input class="form-check-input" type="radio" name="attendance_@volunteer.userId" value="0" required>
                                                                <label class="form-check-label">No</label>
                                                            </div>
                                                        </div>
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <!-- Submit All Ratings Button -->
                <div class="row">
                    <div class="col-md-12 text-center">
                        <button type="button" class="btn btn-primary" id="submitAllRatings">Submit All Ratings</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const filterBy = document.getElementById('filterBy');
        const volunteersByRating = document.getElementById('volunteersByRating');
        const volunteersByAvailability = document.getElementById('volunteersByAvailability');

        filterBy.addEventListener('change', function () {
            const ratingCheckboxes = document.querySelectorAll('.rating-checkbox');
            const availabilityCheckboxes = document.querySelectorAll('.availability-checkbox');

            if (filterBy.value === 'Rating') {
                volunteersByRating.style.display = 'block';
                volunteersByAvailability.style.display = 'none';
                availabilityCheckboxes.forEach(checkbox => checkbox.checked = false); // Deselect availability checkboxes
            } else if (filterBy.value === 'Availability') {
                volunteersByRating.style.display = 'none';
                volunteersByAvailability.style.display = 'block';
                ratingCheckboxes.forEach(checkbox => checkbox.checked = false); // Deselect rating checkboxes
            }
        });
    });

    $(document).on('click', '.remove-btn', function () {
        const volunteerId = $(this).data('id');
        const eventId = $(this).data('event-id');
        const row = $(this).closest('tr');

        // Confirm removal with SweetAlert
        Swal.fire({
            title: "Are you sure?",
            text: "This action will remove the volunteer from the event.",
            icon: "warning",
            showCancelButton: true,
            confirmButtonColor: "#d33",
            cancelButtonColor: "#3085d6",
            confirmButtonText: "Yes, remove them!"
        }).then((result) => {
            if (result.isConfirmed) {
                // Proceed with AJAX call to remove volunteer
                $.ajax({
                    url: '/Organization/RemoveVolunteer',
                    type: 'POST',
                    data: { userId: volunteerId, eventId: eventId },
                    success: function (response) {
                        if (response.success) {
                            // Display success message
                            Swal.fire("Removed!", response.message, "success");
                            row.remove(); // Remove the row from the table
                        } else {
                            // Display error message
                            Swal.fire("Error!", response.message, "error");
                        }
                    },
                    error: function (xhr, status, error) {
                        // Handle AJAX errors
                        Swal.fire("Error!", "An error occurred while processing the request.", "error");
                    }
                });
            }
        });
    });
</script>

<script>
    document.addEventListener('DOMContentLoaded', function () {

         document.querySelectorAll('.accept-btn').forEach(function (button) {
        button.addEventListener('click', function () {
            const userId = this.getAttribute('data-id');
            const eventId = this.getAttribute('data-event-id');

            Swal.fire({
                title: 'Are you sure?',
                text: 'Do you want to accept this volunteer?',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, accept!',
                cancelButtonText: 'Cancel'
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        type: 'POST',
                        url: '@Url.Action("ConfirmApplicants", "Organization")',
                        data: { id: userId, eventId: eventId },
                        success: function (response) {
                            if (response.success) {
                                Swal.fire({
                                    icon: 'success',
                                    title: 'Accepted!',
                                    text: response.message,
                                    confirmButtonText: 'OK'
                                }).then(() => {
                                    window.location.href = response.redirectUrl;
                                });
                            } else {
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Error',
                                    text: response.message,
                                    confirmButtonText: 'OK'
                                });
                            }
                        },
                        error: function () {
                            Swal.fire({
                                icon: 'error',
                                title: 'Oops...',
                                text: 'An error occurred while processing the request.',
                                confirmButtonText: 'OK'
                            });
                        }
                    });
                }
            });
        });
    });

    // Event listener for Decline button click
    document.querySelectorAll('.decline-btn').forEach(function (button) {
        button.addEventListener('click', function () {
            const userId = this.getAttribute('data-id');
            const eventId = this.getAttribute('data-event-id');

            Swal.fire({
                title: 'Are you sure?',
                text: 'Do you want to decline this volunteer?',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, decline!',
                cancelButtonText: 'Cancel'
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        type: 'POST',
                        url: '@Url.Action("DeclineApplicants", "Organization")',
                        data: { id: userId, eventId: eventId },
                        success: function (response) {
                            if (response.success) {
                                Swal.fire({
                                    icon: 'success',
                                    title: 'Declined!',
                                    text: response.message,
                                    confirmButtonText: 'OK'
                                }).then(() => {
                                    window.location.href = response.redirectUrl;
                                });
                            } else {
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Error',
                                    text: response.message,
                                    confirmButtonText: 'OK'
                                });
                            }
                        },
                        error: function () {
                            Swal.fire({
                                icon: 'error',
                                title: 'Oops...',
                                text: 'An error occurred while processing the request.',
                                confirmButtonText: 'OK'
                            });
                        }
                    });
                }
            });
        });
    });

    // Event listener for Invite Form submission
    $("#inviteForm").submit(function (event) {
        event.preventDefault(); // Prevent the default form submission

        $.ajax({
            type: "POST",
            url: $(this).attr("action"),
            data: $(this).serialize(),
            success: function (response) {
                if (response.success) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Invitation Summary',
                        html: `<p>Already Joined: <strong>${response.alreadyJoinedUsers.length}</strong></p>
                               <p>Already Invited: <strong>${response.alreadyInvitedUsers.length}</strong></p>
                               <p>Newly Invited: <strong>${response.newlyInvitedUsers.length}</strong></p>`,
                        confirmButtonText: 'OK'
                    }).then(() => {
                        window.location.href = response.redirectUrl;
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: response.message,
                        confirmButtonText: 'OK'
                    });
                }
            },
            error: function () {
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: 'An error occurred while sending the invitations.',
                    confirmButtonText: 'OK'
                });
            }
        });
    });

        $('#editEventModal').on('shown.bs.modal', function () {
            console.log('Modal shown. Initializing map.');

            // Coordinates for Lapu-Lapu City
            const lapuLapuCoords = [10.3140, 123.9495];

            // Initialize the map centered on Lapu-Lapu City
            window.leafletMap = L.map('map').setView(lapuLapuCoords, 13);

            // Add OpenStreetMap tile layer
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: 'Map data © OpenStreetMap contributors'
            }).addTo(window.leafletMap);

            // Define the polygon boundary for Lapu-Lapu City and Cordova
            const allowedArea = L.polygon(
                [
                    [10.2886, 123.9053], // Point 1
                    [10.2346, 123.9479], // Point 2
                    [10.3619, 124.0107], // Point 3
                    [10.3291, 124.0518], // Point 4
                    [10.2886, 123.9053]  // Close the polygon
                ],
                {
                    color: '#3388ff', // Border color (optional)
                    opacity: 0,       // Hide the border
                    fillOpacity: 0    // Hide the fill
                }
            ).addTo(window.leafletMap);

            // Add click event to the map
            window.leafletMap.on('click', function (e) {
                const latlng = e.latlng;
                const lat = latlng.lat;
                const lon = latlng.lng;

                console.log('Clicked coordinates:', lat, lon);

                // Check if the clicked location is within the allowed polygon
                if (allowedArea.getBounds().contains(latlng)) {
                    const url = `https://nominatim.openstreetmap.org/reverse?format=jsonv2&lat=${lat}&lon=${lon}`;

                    fetch(url)
                        .then(response => response.json())
                        .then(data => {
                            const address = data.display_name;
                            document.getElementById('EditEvent_location').value = address;

                            if (window.marker) {
                                window.leafletMap.removeLayer(window.marker);
                            }

                            window.marker = L.marker([lat, lon]).addTo(window.leafletMap)
                                .bindPopup(`<b>Selected Location:</b><br>${address}`)
                                .openPopup();
                        })
                        .catch(error => {
                            console.error('Error in reverse geocoding:', error);
                            document.getElementById('EditEvent_location').value = `${lat}, ${lon}`;

                            if (window.marker) {
                                window.leafletMap.removeLayer(window.marker);
                            }

                            window.marker = L.marker([lat, lon]).addTo(window.leafletMap)
                                .bindPopup(`<b>Coordinates:</b><br>Lat: ${lat}, Lon: ${lon}`)
                                .openPopup();
                        });
                } else {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Invalid Location',
                        text: 'Please select a location within Lapu-Lapu City or Cordova.'
                    });
                }
            });
        });

        // Destroy the map when the modal is hidden
        $('#editEventModal').on('hidden.bs.modal', function () {
            if (window.leafletMap) {
                console.log('Modal hidden. Removing map.');
                window.leafletMap.remove();
                window.leafletMap = null;
            }
        });

document.getElementById('submitAllRatings').addEventListener('click', function () {
    let volunteerRatingsData = [];
    document.querySelectorAll('tbody tr').forEach(function (row) {
        // Get Volunteer ID
        let volunteerId = row.querySelector('[name^="rating_"]').name.split('_')[1];

        // Get Attendance
        let attendance = row.querySelector(`input[name="attendance_${volunteerId}"]:checked`);

        // Get Skill Ratings
        let skillRatings = [];
        row.querySelectorAll('.form-check-input[name^="rating_"]:checked').forEach(function (ratingInput) {
            let skillId = ratingInput.name.split('_')[2];
            skillRatings.push({
                SkillId: parseInt(skillId),
                Rating: parseInt(ratingInput.value)
            });
        });

        console.log(`Volunteer ID: ${volunteerId}`);
        console.log(`Attendance selected:`, attendance ? attendance.value : 'None');
        console.log(`Skill ratings for this volunteer:`, skillRatings);

        if (skillRatings.length > 0 && attendance) {
            volunteerRatingsData.push({
                VolunteerId: parseInt(volunteerId),
                Attendance: parseInt(attendance.value),
                SkillRatings: skillRatings
            });
        }
    });

    console.log('Collected volunteer ratings data:', volunteerRatingsData);

    if (volunteerRatingsData.length > 0) {
        $.ajax({
            url: '@Url.Action("SubmitRatings", "Organization")',
            type: 'POST',
            contentType: 'application/json',
            data: JSON.stringify({
                eventId: @Model.eventDetails.eventId,
                volunteerRatings: volunteerRatingsData
            }),
            success: function (response) {
                if (response.success) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Success',
                        text: 'All ratings and attendance submitted successfully.',
                        confirmButtonText: 'OK'
                    }).then(() => {
                        window.location.href = '@Url.Action("EventsList", "Organization")';
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: response.message,
                        confirmButtonText: 'OK'
                    });
                }
            },
            error: function () {
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: 'An error occurred while submitting the ratings.',
                    confirmButtonText: 'OK'
                });
            }
        });
    } else {
        console.log('Incomplete data detected: Missing ratings or attendance for one or more volunteers.');
        Swal.fire({
            icon: 'warning',
            title: 'Incomplete Data',
            text: 'Please rate and select attendance for all volunteers before submitting.',
            confirmButtonText: 'OK'
        });
    }
});

    // Real-time validation for date and time inputs
    var editEventDateStart = document.getElementById('EditEvent_dateStart');
    var editEventDateEnd = document.getElementById('EditEvent_dateEnd');

    if (editEventDateStart) {
        editEventDateStart.addEventListener('input', function () {
            const dateStart = new Date(this.value);
            const now = new Date();
            if (dateStart < now) {
                document.getElementById('EditEvent_dateStart_error').innerText = 'Start date and time must be in the future.';
                this.value = '';
            } else {
                document.getElementById('EditEvent_dateStart_error').innerText = '';
            }
            validateEditEventDuration();
        });
    }

    if (editEventDateEnd) {
        editEventDateEnd.addEventListener('input', function () {
            validateEditEventDuration();
        });
    }

    function validateEditEventDuration() {
        const dateStart = new Date(document.getElementById('EditEvent_dateStart').value);
        const dateEnd = new Date(document.getElementById('EditEvent_dateEnd').value);
        const now = new Date();

        if (dateEnd < now) {
            document.getElementById('EditEvent_dateEnd_error').innerText = 'End date and time must be in the future.';
            document.getElementById('EditEvent_dateEnd').value = '';
            return;
        } else {
            document.getElementById('EditEvent_dateEnd_error').innerText = '';
        }

        if (dateEnd <= dateStart) {
            document.getElementById('EditEvent_dateEnd_error').innerText = 'End date and time must be after start date and time.';
            document.getElementById('EditEvent_dateEnd').value = '';
            return;
        }

        const hoursDifference = (dateEnd - dateStart) / (1000 * 60 * 60);
        if (hoursDifference < 3) {
            document.getElementById('EditEvent_dateEnd_error').innerText = 'Event duration must be at least 3 hours.';
            document.getElementById('EditEvent_dateEnd').value = '';
        } else {
            document.getElementById('EditEvent_dateEnd_error').innerText = '';
        }
    }

    // Add event listeners to ensure only numbers are entered
    function onlyNumbers(input, errorId) {
        input.addEventListener('input', function (e) {
            this.value = this.value.replace(/[^0-9]/g, '');
            if (isNaN(this.value) || this.value === '') {
                document.getElementById(errorId).innerText = 'Please enter a valid number.';
            } else {
                document.getElementById(errorId).innerText = '';
            }
        });
    }

    var editEventTargetAmount = document.getElementById('EditEvent_targetAmount');
    var editEventMaxVolunteer = document.getElementById('EditEvent_maxVolunteer');

    if (editEventTargetAmount) {
        onlyNumbers(editEventTargetAmount, 'EditEvent_targetAmount_error');
    }

    if (editEventMaxVolunteer) {
        onlyNumbers(editEventMaxVolunteer, 'EditEvent_maxVolunteer_error');
    }
});

// Functions that don't depend on the DOM being fully loaded can be outside
function toggleTargetAmount(checkbox) {
    const targetAmountInput = document.getElementById('EditEvent_targetAmount');
    if (checkbox.checked) {
        targetAmountInput.disabled = false;
    } else {
        targetAmountInput.disabled = true;
        targetAmountInput.value = ''; // Clear the value when disabled
    }
}

function addEditSkillToTable(skill) {
    const tableBody = document.getElementById('edit-skills-table-body');
    const skillButton = document.getElementById(`edit-skill-${skill}`);

    skillButton.disabled = true;

    const row = document.createElement('tr');
    row.setAttribute('data-skill', skill);

    const skillNameCell = document.createElement('td');
    skillNameCell.textContent = skill;
    row.appendChild(skillNameCell);

    const actionCell = document.createElement('td');
    const skillInput = document.createElement('input');
    skillInput.type = 'hidden';
    skillInput.name = 'skills';
    skillInput.value = skill;
    actionCell.appendChild(skillInput);

    const removeButton = document.createElement('button');
    removeButton.type = 'button';
    removeButton.className = 'btn btn-danger btn-sm';
    removeButton.textContent = 'Remove';
    removeButton.onclick = function () {
        removeEditSkillFromTable(skill, this);
    };
    actionCell.appendChild(removeButton);

    row.appendChild(actionCell);
    tableBody.appendChild(row);

    const skillsToRemoveContainer = document.getElementById('skillsToRemoveContainer');
    if (skillsToRemoveContainer) {
        const inputs = skillsToRemoveContainer.querySelectorAll('input[name^="skillsToRemove"]');
        inputs.forEach(input => {
            if (input.value === skill) {
                skillsToRemoveContainer.removeChild(input);
            }
        });
    }
}

function removeEditSkillFromTable(skill, button) {
    const row = button.closest('tr');
    row.parentNode.removeChild(row);

    const skillButton = document.getElementById(`edit-skill-${skill}`);
    if (skillButton) {
        skillButton.disabled = false;
    }

    const skillsToRemoveContainer = document.getElementById('skillsToRemoveContainer');
    if (skillsToRemoveContainer) {
        const existingInput = Array.from(skillsToRemoveContainer.querySelectorAll('input[name^="skillsToRemove"]'))
            .find(input => input.value === skill);

        if (!existingInput) {
            const index = skillsToRemoveContainer.childElementCount;
            const removedSkillInput = document.createElement('input');
            removedSkillInput.type = 'hidden';
            removedSkillInput.name = `skillsToRemove[${index}]`;
            removedSkillInput.value = skill;
            skillsToRemoveContainer.appendChild(removedSkillInput);
        }
    }
}

function previewEditImages() {
    const previewContainer = document.getElementById('edit-image-preview');
    const files = document.getElementById('EditEvent_uploadImage').files;
    previewContainer.innerHTML = '';
    for (let i = 0; i < files.length; i++) {
        const file = files[i];
        const reader = new FileReader();
        reader.onload = function (e) {
            const img = document.createElement('img');
            img.src = e.target.result;
            img.classList.add('img-thumbnail', 'me-2', 'mb-2');
            previewContainer.appendChild(img);
        };
        reader.readAsDataURL(file);
    }
}

    function validateEditForm(event) {
        event.preventDefault(); // Prevent default form submission

        let isValid = true;
        document.querySelectorAll('.error').forEach(e => e.innerHTML = '');

    const eventTitle = document.getElementById('EditEvent_eventTitle');
    if (eventTitle.value.trim() === '') {
        document.getElementById('EditEvent_eventTitle_error').innerText = 'Event title is required.';
        isValid = false;
    }

    const eventDescription = document.getElementById('EditEvent_eventDescription');
    if (eventDescription.value.trim() === '') {
        document.getElementById('EditEvent_eventDescription_error').innerText = 'Event description is required.';
        isValid = false;
    }

    const maxVolunteersInput = document.getElementById('EditEvent_maxVolunteer');
    const maxVolunteers = parseInt(maxVolunteersInput.value);
    if (isNaN(maxVolunteers) || maxVolunteers <= 0) {
        document.getElementById('EditEvent_maxVolunteer_error').innerText = 'Maximum volunteers must be a positive number.';
        isValid = false;
    } else {
        document.getElementById('EditEvent_maxVolunteer_error').innerText = '';
    }

    const addedSkills = document.querySelectorAll('#edit-skills-table-body input[name="skills"]');
    if (addedSkills.length === 0) {
        document.getElementById('EditEvent_skills_error').innerText = 'At least one skill is required.';
        isValid = false;
    } else {
        document.getElementById('EditEvent_skills_error').innerText = '';
    }

    const dateStartInput = document.getElementById('EditEvent_dateStart');
    const dateEndInput = document.getElementById('EditEvent_dateEnd');
    const dateStart = new Date(dateStartInput.value);
    const dateEnd = new Date(dateEndInput.value);
    const now = new Date();

    if (isNaN(dateStart.getTime())) {
        document.getElementById('EditEvent_dateStart_error').innerText = 'Start date and time is required.';
        isValid = false;
    } else if (dateStart < now) {
        document.getElementById('EditEvent_dateStart_error').innerText = 'Start date and time must be in the future.';
        isValid = false;
    } else {
        document.getElementById('EditEvent_dateStart_error').innerText = '';
    }

    if (isNaN(dateEnd.getTime())) {
        document.getElementById('EditEvent_dateEnd_error').innerText = 'End date and time is required.';
        isValid = false;
    } else if (dateEnd <= dateStart) {
        document.getElementById('EditEvent_dateEnd_error').innerText = 'End date and time must be after start date and time.';
        isValid = false;
    } else {
        document.getElementById('EditEvent_dateEnd_error').innerText = '';
    }

    // Validate location
    const locationInput = document.getElementById('EditEvent_location');
    if (locationInput.value.trim() === '') {
        document.getElementById('EditEvent_location_error').innerText = 'Location is required.';
        isValid = false;
    }

    // Validate target amount if enabled
    const targetAmountInput = document.getElementById('EditEvent_targetAmount');
    const targetAmountCheckbox = document.getElementById('editSwitchCheckDefault');
    if (targetAmountCheckbox.checked) {
        const targetAmountValue = parseFloat(targetAmountInput.value);
        if (isNaN(targetAmountValue) || targetAmountValue <= 0) {
            document.getElementById('EditEvent_targetAmount_error').innerText = 'Enter a valid target amount.';
            isValid = false;
        } else {
            document.getElementById('EditEvent_targetAmount_error').innerText = '';
        }
    }

    if (!isValid) {
        Swal.fire({
            icon: 'error',
            title: 'Validation Error',
            text: 'Please fix the errors before submitting.',
            confirmButtonText: 'OK'
        });
        return false;
    }

        $.ajax({
            type: 'POST',
            url: $('#edit-event-form').attr('action'),
            data: new FormData(document.getElementById('edit-event-form')),
            contentType: false,
            processData: false,
            success: function (response) {
                if (response.success) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Success',
                        text: response.message,
                        confirmButtonText: 'OK'
                    }).then(() => {
                        window.location.href = response.redirectUrl;
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: response.message,
                        confirmButtonText: 'OK'
                    });
                }
            },
            error: function () {
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: 'An error occurred while submitting the form.',
                    confirmButtonText: 'OK'
                });
            }
        });

        return false;
    }

    document.addEventListener('DOMContentLoaded', function () {
        const dateStartInput = document.getElementById('EditEvent_dateStart');
        const dateEndInput = document.getElementById('EditEvent_dateEnd');
        const now = new Date();

        // Validate Start Date in real-time
        dateStartInput.addEventListener('input', function () {
            const dateStart = new Date(this.value);
            const errorSpan = document.getElementById('EditEvent_dateStart_error');

            if (isNaN(dateStart.getTime()) || dateStart <= now) {
                errorSpan.innerText = 'Start date and time must be in the future.';
                this.value = ''; // Clear invalid input
            } else {
                errorSpan.innerText = '';
            }

            validateEventDuration(); // Validate duration whenever start date changes
        });

        // Validate End Date in real-time
        dateEndInput.addEventListener('input', function () {
            validateEventDuration(); // Validate duration whenever end date changes
        });

        // Function to validate the duration between Start Date and End Date
        function validateEventDuration() {
            const dateStart = new Date(dateStartInput.value);
            const dateEnd = new Date(dateEndInput.value);
            const errorSpanEnd = document.getElementById('EditEvent_dateEnd_error');

            // Reset previous errors
            errorSpanEnd.innerText = '';

            if (isNaN(dateEnd.getTime())) {
                errorSpanEnd.innerText = 'End date and time is required.';
                dateEndInput.value = '';
                return;
            }

            if (dateEnd <= now) {
                errorSpanEnd.innerText = 'End date and time must be in the future.';
                dateEndInput.value = '';
                return;
            }

            if (dateEnd <= dateStart) {
                errorSpanEnd.innerText = 'End date and time must be after the start date.';
                dateEndInput.value = '';
                return;
            }
        }
    });

     function initializeMap() {
     var validZipCodes = ["6015", "6016"]; // Both valid zip codes for Lapu-Lapu City

     var map = L.map('map').setView([10.3102, 123.9494], 13); // Coordinates for Lapu-Lapu City

     // Add OpenStreetMap tiles
     L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
         attribution: '© OpenStreetMap contributors'
     }).addTo(map);

     // Add a marker
     var marker = L.marker([10.3102, 123.9494], { draggable: true }).addTo(map)
         .bindPopup('Drag me or click anywhere on the map.')
         .openPopup();

     // Function to fetch and validate location
     function fetchLocationName(lat, lng) {
         var apiUrl = `https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lng}`;
         var locationInput = document.getElementById('locationName');

         fetch(apiUrl)
             .then(response => response.json())
             .then(data => {
                 if (data && data.address) {
                     var displayName = data.display_name;
                     var zipCode = data.address.postcode;

                     if (validZipCodes.includes(zipCode)) {
                         locationInput.value = displayName;
                         locationInput.classList.remove("is-invalid");
                         locationInput.classList.add("is-valid");
                     } else {
                         locationInput.value = ""; // Clear the input
                         locationInput.classList.remove("is-valid");
                         locationInput.classList.add("is-invalid");
                         marker.bindPopup(`Invalid Location: Outside Lapu-Lapu City`).openPopup();
                     }
                 } else {
                     locationInput.value = ""; // Clear the input
                     locationInput.classList.remove("is-valid");
                     locationInput.classList.add("is-invalid");
                 }
             })
             .catch(error => {
                 console.error("Error fetching location:", error);
                 locationInput.value = ""; // Clear the input
                 locationInput.classList.remove("is-valid");
                 locationInput.classList.add("is-invalid");
             });
     }

     // Event listener for map click
     map.on('click', function (e) {
         var lat = e.latlng.lat.toFixed(6); // Latitude
         var lng = e.latlng.lng.toFixed(6); // Longitude

         // Update marker position
         marker.setLatLng(e.latlng).update();

         // Fetch and validate location
         fetchLocationName(lat, lng);
     });

     // Event listener for marker drag
     marker.on('dragend', function (e) {
         var lat = e.target.getLatLng().lat.toFixed(6);
         var lng = e.target.getLatLng().lng.toFixed(6);

         // Fetch and validate location
         fetchLocationName(lat, lng);
     });
 }

 // Initialize the map when the modal is shown
 document.getElementById('createEventModal').addEventListener('shown.bs.modal', function () {
     initializeMap();
 });

    document.addEventListener("DOMContentLoaded", () => {
        const selectedSkillsTable = document.getElementById("selectedSkillsTable");

        // Attach remove event listener to all skill rows (existing and new)
        function attachRemoveListeners() {
            selectedSkillsTable.querySelectorAll(".remove-skill-btn").forEach(button => {
                button.addEventListener("click", function () {
                    const row = this.closest("tr");
                    const skillId = row.getAttribute("data-skill-id");

                    // Remove the row from the table
                    row.remove();

                    // Re-enable the corresponding skill button
                    const correspondingButton = document.querySelector(`.skill-button[data-skill-id="${skillId}"]`);
                    if (correspondingButton) {
                        correspondingButton.disabled = false;
                        correspondingButton.classList.remove("disabled");
                    }
                });
            });
        }

        // Function to update skill button states
        function updateSkillButtons() {
            document.querySelectorAll(".skill-button").forEach(button => {
                const skillId = button.getAttribute("data-skill-id");
                const exists = selectedSkillsTable.querySelector(`tr[data-skill-id="${skillId}"]`);

                if (exists) {
                    button.disabled = true;
                    button.classList.add("disabled");
                } else {
                    button.disabled = false;
                    button.classList.remove("disabled");
                }
            });
        }

        // Attach click event listeners to skill buttons
        document.querySelectorAll(".skill-button").forEach(button => {
            button.addEventListener("click", function () {
                const skillId = this.getAttribute("data-skill-id");
                const skillName = this.getAttribute("data-skill-name");

                // Check if skill already exists
                if (selectedSkillsTable.querySelector(`tr[data-skill-id="${skillId}"]`)) return;

                // Create a new row for the skill
                const row = document.createElement("tr");
                row.setAttribute("data-skill-id", skillId);

                // Add Skill Name Cell
                const nameCell = document.createElement("td");
                nameCell.classList.add("skill-name");
                nameCell.textContent = skillName;

                // Add Action Cell with Remove Button
                const actionCell = document.createElement("td");
                const removeButton = document.createElement("button");
                removeButton.type = "button";
                removeButton.classList.add("btn", "btn-danger", "btn-sm", "remove-skill-btn");
                removeButton.textContent = "Remove";

                actionCell.appendChild(removeButton);

                // Append cells to the row
                row.appendChild(nameCell);
                row.appendChild(actionCell);

                // Append row to the table
                selectedSkillsTable.appendChild(row);

                // Disable the clicked button
                this.disabled = true;
                this.classList.add("disabled");

                // Reattach listeners after adding a new skill
                attachRemoveListeners();
            });
        });

        // Attach listeners on modal open
        document.getElementById("createEventModal").addEventListener("shown.bs.modal", () => {
            updateSkillButtons();   // Disable skill buttons if they exist
            attachRemoveListeners(); // Attach listeners to existing skills
        });
    });

 document.addEventListener("DOMContentLoaded", function () {
     const eventImagesInput = document.getElementById("eventImages");
     const imagePreviewContainer = document.getElementById("imagePreviewContainer");

     // Event listener for file input change
     eventImagesInput.addEventListener("change", function () {
         // Clear the previous previews
         imagePreviewContainer.innerHTML = "";

         // Get the selected files
         const files = Array.from(eventImagesInput.files);

         files.forEach((file) => {
             // Ensure the file is an image
             if (file.type.startsWith("image/")) {
                 const reader = new FileReader();

                 // On load, create an image preview
                 reader.onload = function (e) {
                     const imageWrapper = document.createElement("div");
                     imageWrapper.classList.add("position-relative", "m-2");

                     const image = document.createElement("img");
                     image.src = e.target.result;
                     image.alt = file.name;
                     image.classList.add("img-thumbnail", "me-2");
                     image.style.width = "120px";
                     image.style.height = "120px";

                     // Add a remove button for the preview
                     const removeButton = document.createElement("button");
                     removeButton.classList.add("btn", "btn-sm", "btn-danger", "position-absolute", "top-0", "end-0");
                     removeButton.textContent = "×";
                     removeButton.addEventListener("click", function () {
                         // Remove the preview image and corresponding file from the input
                         imageWrapper.remove();
                         removeFile(file);
                     });

                     imageWrapper.appendChild(image);
                     imageWrapper.appendChild(removeButton);
                     imagePreviewContainer.appendChild(imageWrapper);
                 };

                 reader.readAsDataURL(file);
             }
         });

         // Function to remove a file from the input
         function removeFile(fileToRemove) {
             const dataTransfer = new DataTransfer();
             files.forEach((file) => {
                 if (file !== fileToRemove) {
                     dataTransfer.items.add(file);
                 }
             });
             eventImagesInput.files = dataTransfer.files;
         }
     });
 });

 document.addEventListener("DOMContentLoaded", () => {
     const allowDonationSwitch = document.getElementById("allowDonation");
     const donationAllowedInput = document.getElementById("donationAllowed");

     // Update hidden input based on switch state
     allowDonationSwitch.addEventListener("change", function () {
         donationAllowedInput.value = this.checked ? 1 : 0;
     });

     // Event form inputs
     const eventForm = document.getElementById("createEventModal");
     const eventName = document.getElementById("eventName");
     const eventDescription = document.getElementById("eventDescription");
     const maxVolunteers = document.getElementById("maxVolunteers");
     const dateStart = document.getElementById("dateStart");
     const dateEnd = document.getElementById("dateEnd");
     const locationName = document.getElementById("locationName");
     const selectedSkillsTable = document.getElementById("selectedSkillsTable");
     const eventImagesInput = document.getElementById("eventImages");

     // Error elements
     const eventNameError = document.getElementById("eventNameError");
     const eventDescriptionError = document.getElementById("eventDescriptionError");
     const maxVolunteersError = document.getElementById("maxVolunteersError");
     const dateStartError = document.getElementById("dateStartError");
     const dateEndError = document.getElementById("dateEndError");
     const locationNameError = document.getElementById("locationNameError");
     const selectedSkillsError = document.getElementById("selectedSkillsError");
     const eventImagesError = document.getElementById("eventImagesError");

     // Utility functions
     function isEmpty(value) {
         return !value.trim();
     }

     function showError(input, errorElement, message) {
         errorElement.textContent = message;
         input.classList.add("is-invalid");
         input.classList.remove("is-valid");
     }

     function clearError(input, errorElement) {
         errorElement.textContent = "";
         input.classList.remove("is-invalid");
         input.classList.add("is-valid");
     }

     // Real-time validation
     eventName.addEventListener("input", () => {
         if (isEmpty(eventName.value)) {
             showError(eventName, eventNameError, "Event name is required.");
         } else {
             clearError(eventName, eventNameError);
         }
     });

     eventDescription.addEventListener("input", () => {
         if (isEmpty(eventDescription.value)) {
             showError(eventDescription, eventDescriptionError, "Event description is required.");
         } else {
             clearError(eventDescription, eventDescriptionError);
         }
     });

     maxVolunteers.addEventListener("input", () => {
         if (isEmpty(maxVolunteers.value) || maxVolunteers.value <= 0) {
             showError(maxVolunteers, maxVolunteersError, "Maximum volunteers must be greater than 0.");
         } else {
             clearError(maxVolunteers, maxVolunteersError);
         }
     });

     dateStart.addEventListener("input", () => {
         const now = new Date();
         const startDate = new Date(dateStart.value);
         if (!dateStart.value || startDate <= now) {
             showError(dateStart, dateStartError, "Start date must be in the future.");
         } else {
             clearError(dateStart, dateStartError);
         }
     });

     dateEnd.addEventListener("input", () => {
         const startDate = new Date(dateStart.value);
         const endDate = new Date(dateEnd.value);
         if (!dateEnd.value || endDate <= startDate) {
             showError(dateEnd, dateEndError, "End date must be after the start date.");
         } else {
             clearError(dateEnd, dateEndError);
         }
     });

     locationName.addEventListener("input", () => {
         if (isEmpty(locationName.value)) {
             showError(locationName, locationNameError, "Location is required.");
         } else {
             clearError(locationName, locationNameError);
         }
     });

     // Form submission validation
     document.getElementById("createEventBtn").addEventListener("click", () => {
         let isValid = true;

         // Validate Event Name
         if (isEmpty(eventName.value)) {
             showError(eventName, eventNameError, "Event name is required.");
             isValid = false;
         } else {
             clearError(eventName, eventNameError);
         }

         // Validate Event Description
         if (isEmpty(eventDescription.value)) {
             showError(eventDescription, eventDescriptionError, "Event description is required.");
             isValid = false;
         } else {
             clearError(eventDescription, eventDescriptionError);
         }

         // Validate Maximum Volunteers
         if (isEmpty(maxVolunteers.value) || maxVolunteers.value <= 0) {
             showError(maxVolunteers, maxVolunteersError, "Maximum volunteers must be greater than 0.");
             isValid = false;
         } else {
             clearError(maxVolunteers, maxVolunteersError);
         }

         // Validate Dates
         const now = new Date();
         const startDate = new Date(dateStart.value);
         const endDate = new Date(dateEnd.value);

         if (!dateStart.value || startDate <= now) {
             showError(dateStart, dateStartError, "Start date must be in the future.");
             isValid = false;
         } else {
             clearError(dateStart, dateStartError);
         }

         if (!dateEnd.value || endDate <= startDate) {
             showError(dateEnd, dateEndError, "End date must be after the start date.");
             isValid = false;
         } else {
             clearError(dateEnd, dateEndError);
         }

         // Validate Location
         if (isEmpty(locationName.value)) {
             showError(locationName, locationNameError, "Location is required.");
             isValid = false;
         } else {
             clearError(locationName, locationNameError);
         }

         // Validate Selected Skills
         if (selectedSkillsTable.children.length === 0) {
             selectedSkillsError.textContent = "At least one skill must be selected.";
             isValid = false;
         } else {
             selectedSkillsError.textContent = "";
         }

         // If valid, submit the form
         if (isValid) {
             const formData = new FormData();

             // Collect form data
             formData.append("eventDto.eventId", parseInt("@Model.eventDetails.eventId"));
             formData.append("eventDto.eventTitle", eventName.value);
             formData.append("eventDto.eventDescription", eventDescription.value);
             formData.append("eventDto.maxVolunteer", maxVolunteers.value);
             formData.append("eventDto.dateStart", dateStart.value);
             formData.append("eventDto.dateEnd", dateEnd.value);
             formData.append("eventDto.location", locationName.value);

             // Pass the donationAllowed value
             formData.append("donationAllowed", donationAllowedInput.value);

             // Collect selected skills
             document.querySelectorAll("#selectedSkillsTable tr").forEach((row, index) => {
                 const skillId = row.getAttribute("data-skill-id");
                 const skillName = row.querySelector(".skill-name").textContent.trim();

                 formData.append(`skills[${index}].Id`, skillId);
                 formData.append(`skills[${index}].Name`, skillName);
             });

             // Collect uploaded images
             Array.from(eventImagesInput.files).forEach((file) => {
                 formData.append("eventImages", file);
             });

             // Send form data to server
             fetch("/Organization/EditEvent", {
                 method: "POST",
                 body: formData,
             })
                 .then((response) => response.json())
                 .then((data) => {
                     if (data.success) {
                         Swal.fire({
                             icon: "success",
                             title: "Event Created",
                             text: "Your event has been edited successfully!",
                             confirmButtonText: "OK",
                         }).then(() => {
                             location.reload();
                         });
                     } else {
                         Swal.fire({
                             icon: "error",
                             title: "Error",
                             text: data.message || "An error occurred while editng the event.",
                             confirmButtonText: "OK",
                         });
                     }
                 })
                 .catch((error) => {
                     console.error("Error:", error);
                     Swal.fire({
                         icon: "error",
                         title: "Error",
                         text: "An unexpected error occurred. Please try again later.",
                         confirmButtonText: "OK",
                     });
                 });
         }
     });
 });
</script>