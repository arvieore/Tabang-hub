@model Tabang_Hub.Utils.Lists

@{
    ViewBag.Title = "DonationDetails";
    Layout = "~/Views/Shared/_Organization.cshtml";
}

<style>
    .added-skills {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
        margin-top: 10px;
    }

    .skill-item {
        display: flex;
        align-items: center;
        border: 1px solid #ced4da;
        border-radius: 5px;
        padding: 5px 10px;
        background-color: #f8f9fa;
    }

        .skill-item .remove-skill {
            margin-left: 5px;
            color: red;
            cursor: pointer;
        }

    .skill-count {
        width: 60px;
        margin-left: 10px;
    }

    .content-section {
        display: none;
    }

        .content-section.active {
            display: block;
        }

    .fixed-size-img {
        width: 100%;
        max-height: 450px;
        object-fit: cover;
    }

    .profile-img {
        width: 100px;
        height: 100px;
        object-fit: cover;
        border-radius: 50%;
    }

    .profile-card {
        padding: 15px;
        border: 1px solid #ced4da;
        border-radius: 5px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        background-color: white;
    }

    .skills-container {
        display: flex;
        flex-wrap: wrap;
        gap: 5px;
        margin-top: 10px;
    }

    .skill-button {
        padding: 3px 8px;
        font-size: 12px;
        border: 1px solid #ced4da;
        border-radius: 5px;
        background-color: #f8f9fa;
        cursor: pointer;
    }

        .skill-button.selected {
            background-color: #007bff;
            color: white;
            border-color: #007bff;
        }

        .skill-button:disabled {
            cursor: not-allowed;
            background-color: #e9ecef;
        }

    .list-group-item {
        display: flex;
        align-items: center;
        border: 1px solid #ced4da;
        border-radius: 5px;
        margin-bottom: 10px;
        box-shadow: 0 0 5px rgba(0, 0, 0, 0.1);
    }

        .list-group-item .badge {
            font-size: 0.75em;
        }

    .progress {
        height: 30px;
        background-color: #e9ecef;
        border-radius: 15px;
        overflow: hidden;
        box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.1);
        position: relative;
    }

    .progress-bar {
        background-color: #007bff;
        line-height: 30px;
        color: white;
        text-align: center;
        transition: width 0.6s ease;
    }

    .progress-text {
        position: absolute;
        width: 100%;
        height: 100%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: bold;
        color: black;
        z-index: 2;
    }

    .progress-bar-container {
        position: relative;
    }

    .edit-button {
        position: absolute;
        top: 10px;
        right: 10px;
    }
</style>

<!-- Tabs -->
<div class="container py-3">
    <ul class="nav nav-tabs mb-3" id="eventTabs" role="tablist">
        <li class="nav-item" role="presentation">
            <button class="nav-link active" id="organization-details-tab" data-bs-toggle="tab" data-bs-target="#organization-details" type="button" role="tab" aria-controls="organization-details" aria-selected="true">Organization Details</button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="donors-tab" data-bs-toggle="tab" data-bs-target="#donors" type="button" role="tab" aria-controls="donors" aria-selected="false">Donors</button>
        </li>
    </ul>
</div>

<!-- Tab Content -->
<div class="container tab-content" id="eventTabsContent">
    <!-- Organization Details Tab -->
    <div class="tab-pane fade show active" id="organization-details" role="tabpanel" aria-labelledby="organization-details-tab">
        <div class="container py-4">
            <!-- Organization Profile Section -->
            <div class="row mb-4">
                <div class="col-md-12">
                    <div class="profile-card d-flex align-items-center">
                        <img src="@Url.Content("~/Content/images/tabanghub3.png")" class="profile-img me-3" alt="Organization Profile">
                        <div>
                            <h4>@Model.OrgInfo.orgName</h4>
                            <p>@Model.OrgInfo.orgDescription</p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Event Details Section -->
            <div class="row d-flex align-items-stretch">
                <div class="col-md-6">
                    <div class="card h-100">
                        <div class="card-body d-flex flex-column">
                            <div id="carouselExampleFade" class="carousel slide carousel-fade flex-grow-1" data-bs-ride="carousel">
                                <ol class="carousel-indicators">
                                    @for (int i = 0; i < Model.DonationImages.Count; i++)
                                    {
                                        <li data-bs-target="#carouselExampleFade" data-bs-slide-to="@i" class="@(i == 0 ? "active" : "")"></li>
                                    }
                                </ol>
                                <div class="carousel-inner h-100">
                                    @for (int i = 0; i < Model.DonationImages.Count; i++)
                                    {
                                        <div class="carousel-item @(i == 0 ? "active" : "") h-100">
                                            <img src="@Url.Content("~/Content/Events/" + Model.DonationImages[i].imagePath)" class="d-block w-100 h-100" alt="Event Image @i" style="object-fit: cover;" />
                                        </div>
                                    }
                                </div>
                                <a class="carousel-control-prev" href="#carouselExampleFade" role="button" data-bs-slide="prev">
                                    <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                                    <span class="visually-hidden">Previous</span>
                                </a>
                                <a class="carousel-control-next" href="#carouselExampleFade" role="button" data-bs-slide="next">
                                    <span class="carousel-control-next-icon" aria-hidden="true"></span>
                                    <span class="visually-hidden">Next</span>
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="card h-100">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <h5 class="card-title mb-0">Event Details</h5>
                            @if (Model.DonationEvent.dateStart >= DateTime.Now)
                            {
                                <button class="btn btn-outline-primary edit-button" data-bs-toggle="modal" data-bs-target="#editEventModal">Edit</button>
                            }
                        </div>
                        <div class="card-body d-flex flex-column">
                            <ul class="list-group list-group-flush flex-grow-1">
                                <h5 class="card-title">@Model.DonationEvent.donationEventName</h5>
                                <p class="card-text">@Model.DonationEvent.donationDescription</p>
                                <li class="list-group-item d-flex align-items-center">
                                    <i class="bi bi-calendar-event text-primary me-2"></i>
                                    <strong class="me-2">Start Date:</strong>
                                    <span>
                                        @(Model.DonationEvent.dateStart.HasValue ? Model.DonationEvent.dateStart.Value.ToString("MMMM dd, yyyy - h:mm tt") : "N/A")
                                    </span>
                                </li>
                                <li class="list-group-item d-flex align-items-center">
                                    <i class="bi bi-calendar-x text-danger me-2"></i>
                                    <strong class="me-2">End Date:</strong>
                                    <span>
                                        @(Model.DonationEvent.dateEnd.HasValue ? Model.DonationEvent.dateEnd.Value.ToString("MMMM dd, yyyy - h:mm tt") : "N/A")
                                    </span>
                                </li>
                                <li class="list-group-item"><i class="bi bi-geo-alt me-2"></i><strong>Location:</strong> @Model.DonationEvent.location</li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Donors Tab -->
    <div class="tab-pane fade" id="donors" role="tabpanel" aria-labelledby="donors-tab">
        <div class="container py-4">
            <!-- Pending Donations Section -->
            @*<div class="row mb-4">
                    <div class="col-md-12">
                        <h5 class="mb-4">Pending Donations</h5>
                        <div class="table-responsive">
                            <table class="table table-sm table-bordered table-striped align-middle bg-white">
                                <thead class="table-dark">
                                    <tr>
                                        <th scope="col">Ref. Number</th>
                                        <th scope="col">Donor Name</th>
                                        <th scope="col">Total Donations</th>
                                        <th scope="col">Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var items in Model.donators)
                                    {
                                        if (items.status == 0)
                                        {
                                            <tr>
                                                <td>@items.referenceNum</td>
                                                <td>@items.donorName</td>
                                                <td>@items.donationQuantity</td>
                                                <td>
                                                    <div class="btn-group" role="group">
                                                        <button type="button" class="btn btn-sm btn-primary" onclick="viewDonation(@items.userId, @items.donationEventId)">
                                                            <i class="bi bi-eye"></i> View
                                                        </button>
                                                        <button type="button" class="btn btn-sm btn-success" onclick="markReceived(@items.donatesId)">
                                                            <i class="bi bi-check-circle"></i> Mark as Received
                                                        </button>
                                                    </div>
                                                </td>
                                            </tr>
                                        }
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>*@

            <!-- Successful Donations Section -->
            <div class="row mb-4">
                <div class="col-md-12">
                    <h5 class="mb-4">Donations</h5>
                    <div class="table-responsive">
                        <table class="table table-sm table-bordered table-striped align-middle bg-white">
                            <thead class="table-dark">
                                <tr>
                                    <th scope="col">Donor Name</th>
                                    <th scope="col">Total Donations</th>
                                    <th scope="col">Action</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var items in Model.donators)
                                {
                                    if (items.status == 1)
                                    {
                                        <tr>
                                            <td>@items.donorName</td>
                                            <td>@items.donationQuantity</td>
                                            <td>
                                                <div class="btn-group" role="group">
                                                    <button type="button" class="btn btn-sm btn-primary" onclick="viewDonation('@items.referenceNum')">
                                                        <i class="bi bi-eye"></i> View
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Donation Details Modal -->
<div class="modal fade" id="donationModal" tabindex="-1" aria-labelledby="donationModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="donationModalLabel">Donation Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <table class="table table-sm table-bordered table-striped align-middle bg-white">
                    <thead class="table-dark">
                        <tr>
                            <th scope="col">Donation Type</th>
                            <th scope="col">Unit</th>
                            <th scope="col">Amount/Quantity</th>
                        </tr>
                    </thead>
                    <tbody id="donationDetails">
                        <!-- Donation details will be loaded here dynamically -->
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Edit Event Modal -->
<div class="modal fade" id="editEventModal" tabindex="-1" aria-labelledby="editEventModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <form id="editEventForm" action="/Organization/EditDonationEvent" method="post" enctype="multipart/form-data">
                <div class="modal-header">
                    <h5 class="modal-title" id="editEventModalLabel">Edit Event Details</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <!-- Hidden field for donationEventId -->
                    <input type="hidden" id="editDonationEventId" name="donationEventId" value="@Model.DonationEvent.donationEventId" />

                    <!-- Event Name -->
                    <div class="mb-3">
                        <label for="editEventName" class="form-label">Event Name</label>
                        <input type="text" id="editEventName" name="donationEventName" class="form-control" value="@Model.DonationEvent.donationEventName" required>
                        <span class="text-danger" id="editEventNameError"></span>
                    </div>

                    <!-- Event Description -->
                    <div class="mb-3">
                        <label for="editEventDescription" class="form-label">Description</label>
                        <textarea id="editEventDescription" name="donationDescription" class="form-control" rows="4" required>@Model.DonationEvent.donationDescription</textarea>
                        <span class="text-danger" id="editEventDescriptionError"></span>
                    </div>

                    <!-- Start Date -->
                    <div class="mb-3">
                        <label for="editEventStartDate" class="form-label">Start Date</label>
                        <input type="datetime-local" id="editEventStartDate" name="dateStart" class="form-control"
                               value="@(Model.DonationEvent.dateStart.HasValue ? Model.DonationEvent.dateStart.Value.ToString("yyyy-MM-ddTHH:mm") : "")" required>
                        <span class="text-danger" id="editEventStartDateError"></span>
                    </div>

                    <!-- End Date -->
                    <div class="mb-3">
                        <label for="editEventEndDate" class="form-label">End Date</label>
                        <input type="datetime-local" id="editEventEndDate" name="dateEnd" class="form-control"
                               value="@(Model.DonationEvent.dateEnd.HasValue ? Model.DonationEvent.dateEnd.Value.ToString("yyyy-MM-ddTHH:mm") : "")">
                        <span class="text-danger" id="editEventEndDateError"></span>
                    </div>

                    <!-- Map Section -->
                    <div class="mb-3">
                        <label class="form-label">Select Location on Map</label>
                        <div id="editEventMap" style="height:300px; width:100%; border:1px solid #ced4da;"></div>
                    </div>

                    <!-- Input for Selected Location -->
                    <div class="mb-3">
                        <label for="editEventLocationName" class="form-label">Selected Location</label>
                        <input type="text" id="editEventLocationName" name="location" class="form-control"
                               value="@Model.DonationEvent.location" placeholder="Click on the map to select a location" readonly>
                        <span class="text-danger" id="editEventLocationError"></span>
                    </div>

                    <!-- Image Upload (Optional) -->
                    <div class="mb-3">
                        <label for="editEventImage" class="form-label">Event Image</label>
                        <input type="file" id="editEventImage" name="images" class="form-control" accept="image/*" multiple>
                    </div>
                </div>
                <div class="modal-footer">
                    <!-- Change the button type to 'button' to prevent default form submission -->
                    <button type="button" id="saveEditEventBtn" class="btn btn-primary">Save Changes</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                </div>
            </form>
        </div>
    </div>
</div>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>


<script>
    function viewDonation(refNum) {
        $.ajax({
            url: '/Organization/MyDonation',
            type: 'GET',
            data: { refNum: refNum },
            success: function (response) {
                if (response.success) {
                    const donationDetailsTable = $('#donationDetails');

                    // Clear existing rows
                    donationDetailsTable.empty();

                    // Populate Donation Details
                    response.data.forEach(function (item) {
                        const row = `
                        <tr>
                            <td>${item.donationType}</td>
                            <td>${item.donationUnit || 'N/A'}</td>
                            <td>
                                ${item.donationType === 'Money'
                                ? '₱' + (item.donationQuantity ? item.donationQuantity.toFixed(2) : 'N/A')
                                : (item.donationQuantity ? item.donationQuantity.toFixed(0) : 'N/A')}
                            </td>
                        </tr>`;
                        donationDetailsTable.append(row);
                    });

                    // Show the modal
                    $('#donationModal').modal('show');
                } else {
                    alert(response.message || 'Unable to fetch donation details.');
                }
            },
            error: function (error) {
                console.error('Error:', error);
                alert('An error occurred while fetching the donations. Please try again.');
            }
        });
    }

    function markReceived(donatesId) {
        Swal.fire({
            title: 'Are you sure?',
            text: "You are about to mark this donation as received.",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, mark it!'
        }).then((result) => {
            if (result.isConfirmed) {
                $.ajax({
                    url: '/Organization/Received', // Ensure this URL matches your route
                    type: 'POST',
                    data: { donatesId: donatesId }, // Use the correct parameter name
                    success: function (response) {
                        if (response.success) {
                            Swal.fire(
                                'Marked as Received!',
                                'The donation has been successfully marked as received.',
                                'success'
                            ).then(() => {
                                // Reload the page or update the table dynamically
                                location.reload();
                            });
                        } else {
                            Swal.fire(
                                'Failed!',
                                response.message || 'Failed to mark the donation as received.',
                                'error'
                            );
                        }
                    },
                    error: function (error) {
                        console.error('Error:', error);
                        Swal.fire(
                            'Error!',
                            'An error occurred while marking the donation as received. Please try again.',
                            'error'
                        );
                    }
                });
            }
        });
    }

    function initializeEditEventMap() {
        var validZipCodes = ["6015", "6016"]; // Allowed zip codes
        var editMap = L.map('editEventMap').setView([10.3102, 123.9494], 13); // Coordinates for Lapu-Lapu City
        var editMarker;

        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '© OpenStreetMap contributors'
        }).addTo(editMap);

        // Initial marker at current event location if available
        // If you have lat/lng stored for the event, replace with actual coords
        editMarker = L.marker([10.3102, 123.9494], { draggable: true }).addTo(editMap)
            .bindPopup('Drag me or click anywhere on the map.')
            .openPopup();

        function fetchEditLocationName(lat, lng) {
            var apiUrl = `https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lng}`;
            var locationInput = document.getElementById('editEventLocationName');

            fetch(apiUrl)
                .then(response => response.json())
                .then(data => {
                    if (data && data.address) {
                        var displayName = data.display_name || "";
                        var zipCode = data.address.postcode || "";

                        if (validZipCodes.includes(zipCode)) {
                            locationInput.value = displayName;
                            locationInput.classList.remove("is-invalid");
                            locationInput.classList.add("is-valid");
                            editMarker.bindPopup('Location selected').openPopup();
                        } else {
                            locationInput.value = "";
                            locationInput.classList.remove("is-valid");
                            locationInput.classList.add("is-invalid");
                            editMarker.bindPopup(`Invalid Location: Only zip codes 6015 or 6016 are allowed.`).openPopup();
                        }
                    } else {
                        locationInput.value = "";
                        locationInput.classList.remove("is-valid");
                        locationInput.classList.add("is-invalid");
                        editMarker.bindPopup(`Could not determine address.`).openPopup();
                    }
                })
                .catch(error => {
                    console.error("Error fetching location:", error);
                    locationInput.value = "";
                    locationInput.classList.remove("is-valid");
                    locationInput.classList.add("is-invalid");
                    editMarker.bindPopup(`Error fetching location. Try again.`).openPopup();
                });
        }

        editMap.on('click', function (e) {
            var lat = e.latlng.lat.toFixed(6);
            var lng = e.latlng.lng.toFixed(6);

            editMarker.setLatLng(e.latlng).update();
            fetchEditLocationName(lat, lng);
        });

        editMarker.on('dragend', function (e) {
            var lat = e.target.getLatLng().lat.toFixed(6);
            var lng = e.target.getLatLng().lng.toFixed(6);
            fetchEditLocationName(lat, lng);
        });
    }

    // Initialize the map when the edit event modal is shown
    document.getElementById('editEventModal').addEventListener('shown.bs.modal', function () {
        initializeEditEventMap();
    });

    document.addEventListener("DOMContentLoaded", function () {
        const editEventForm = document.getElementById("editEventForm");
        const editEventName = document.getElementById("editEventName");
        const editEventDescription = document.getElementById("editEventDescription");
        const editEventStartDate = document.getElementById("editEventStartDate");
        const editEventEndDate = document.getElementById("editEventEndDate");
        const editEventLocationName = document.getElementById("editEventLocationName");

        // Error spans
        const editEventNameError = document.getElementById("editEventNameError");
        const editEventDescriptionError = document.getElementById("editEventDescriptionError");
        const editEventStartDateError = document.getElementById("editEventStartDateError");
        const editEventEndDateError = document.getElementById("editEventEndDateError");
        const editEventLocationError = document.getElementById("editEventLocationError");

        function isEmpty(value) {
            return !value.trim();
        }

        function showError(input, errorElement, message) {
            errorElement.textContent = message;
            input.classList.add("is-invalid");
            input.classList.remove("is-valid");
        }

        function clearError(input, errorElement) {
            errorElement.textContent = "";
            input.classList.remove("is-invalid");
            input.classList.add("is-valid");
        }

        // Real-time validation for Event Name
        editEventName.addEventListener("input", () => {
            if (isEmpty(editEventName.value)) {
                showError(editEventName, editEventNameError, "Event name is required.");
            } else {
                clearError(editEventName, editEventNameError);
            }
        });

        // Real-time validation for Event Description
        editEventDescription.addEventListener("input", () => {
            if (isEmpty(editEventDescription.value)) {
                showError(editEventDescription, editEventDescriptionError, "Event description is required.");
            } else {
                clearError(editEventDescription, editEventDescriptionError);
            }
        });

        // Real-time validation for Start Date
        editEventStartDate.addEventListener("input", () => {
            const now = new Date();
            const startDate = new Date(editEventStartDate.value);
            if (!editEventStartDate.value || startDate <= now) {
                showError(editEventStartDate, editEventStartDateError, "Start date must be in the future.");
            } else {
                clearError(editEventStartDate, editEventStartDateError);
            }

            // If end date is set, re-validate end date
            if (editEventEndDate.value) {
                validateEndDate();
            }
        });

        // Real-time validation for End Date
        editEventEndDate.addEventListener("input", () => {
            validateEndDate();
        });

        function validateEndDate() {
            const startDate = new Date(editEventStartDate.value);
            const endDate = new Date(editEventEndDate.value);
            if (editEventEndDate.value && endDate <= startDate) {
                showError(editEventEndDate, editEventEndDateError, "End date must be after the start date.");
            } else {
                // If end date is empty or valid
                if (!editEventEndDate.value) {
                    // No error if not required
                    editEventEndDateError.textContent = "";
                    editEventEndDate.classList.remove("is-invalid");
                    editEventEndDate.classList.remove("is-valid"); // optional field
                } else {
                    clearError(editEventEndDate, editEventEndDateError);
                }
            }
        }

        // Validate Location before submission
        function validateLocation() {
            if (isEmpty(editEventLocationName.value) || editEventLocationName.classList.contains("is-invalid")) {
                showError(editEventLocationName, editEventLocationError, "Please select a valid location.");
                return false;
            } else {
                editEventLocationError.textContent = "";
                if (!editEventLocationName.classList.contains("is-valid")) {
                    editEventLocationName.classList.add("is-valid");
                }
                return true;
            }
        }

        // On clicking the Save Changes button, validate all fields, then submit via AJAX if valid
        document.getElementById("saveEditEventBtn").addEventListener("click", (e) => {
            let isValidForm = true;

            // Validate Event Name
            if (isEmpty(editEventName.value)) {
                showError(editEventName, editEventNameError, "Event name is required.");
                isValidForm = false;
            }

            // Validate Event Description
            if (isEmpty(editEventDescription.value)) {
                showError(editEventDescription, editEventDescriptionError, "Event description is required.");
                isValidForm = false;
            }

            // Validate Start Date
            const now = new Date();
            const startDate = new Date(editEventStartDate.value);
            if (!editEventStartDate.value || startDate <= now) {
                showError(editEventStartDate, editEventStartDateError, "Start date must be in the future.");
                isValidForm = false;
            }

            // Validate End Date
            const endDate = new Date(editEventEndDate.value);
            if (editEventEndDate.value && endDate <= startDate) {
                showError(editEventEndDate, editEventEndDateError, "End date must be after the start date.");
                isValidForm = false;
            }

            // Validate Location
            if (!validateLocation()) {
                isValidForm = false;
            }

            if (!isValidForm) {
                // If form is not valid, do not proceed
                return;
            }

            // If form is valid, use AJAX to submit
            const formData = new FormData(editEventForm);

            fetch(editEventForm.action, {
                method: "POST",
                body: formData
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        Swal.fire({
                            icon: 'success',
                            title: 'Success!',
                            text: data.message || 'Event updated successfully.',
                            confirmButtonText: 'OK'
                        }).then(() => {
                            // Optionally reload the page or close the modal
                            location.reload();
                        });
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error!',
                            text: data.message || 'An error occurred while updating the event.',
                            confirmButtonText: 'OK'
                        });
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Error!',
                        text: 'An unexpected error occurred. Please try again later.',
                        confirmButtonText: 'OK'
                    });
                });
        });
    });
</script>