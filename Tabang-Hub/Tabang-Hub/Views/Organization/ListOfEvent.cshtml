@model Tabang_Hub.Utils.Lists

@{
    ViewBag.Title = "ListOfEvent";
    Layout = "~/Views/Shared/_Organization.cshtml";
}

<!-- Nav tabs -->
<div class="container">
    <ul class="nav nav-tabs justify-content-center" id="eventTabs" role="tablist">
        <li class="nav-item">
            <a class="nav-link active" id="volunteering-tab" data-bs-toggle="tab" href="#volunteering" role="tab" aria-controls="volunteering" aria-selected="true">Volunteering Event</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" id="donation-tab" data-bs-toggle="tab" href="#donation" role="tab" aria-controls="donation" aria-selected="false">Donation Event</a>
        </li>
    </ul>
</div>

<!-- Tab panes -->
<div class="container mt-4">
    <div class="tab-content" id="eventTabsContent">
        <!-- Volunteering Events Tab -->
        <div class="tab-pane fade show active" id="volunteering" role="tabpanel" aria-labelledby="volunteering-tab">
            <!-- Create Event Button -->
            <div class="d-flex justify-content-start mb-3">
                <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#createEventModal">
                    Create Event
                </button>
            </div>
            <div class="table-responsive">
                <table class="table table-striped table-hover table-bordered rounded-5" id="eventsTable">
                    <thead style="background-color: #3087d1; color: white;">
                        <tr>
                            <th>Event Name</th>
                            <th>Description</th>
                            <th>Target Amount</th>
                            <th>Max Volunteers</th>
                            <th>Date Start</th>
                            <th>Date End</th>
                            <th>Location</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Model.listOfOrgEvents != null && Model.listOfOrgEvents.Any())
                        {
                            foreach (var eventItem in Model.listOfOrgEvents)
                            {
                                <tr data-event-id="@eventItem.eventId" class="clickable-row">
                                    <td>@eventItem.eventTitle</td>
                                    <td>
                                        <span class="description" title="@eventItem.eventDescription">
                                            @eventItem.eventDescription
                                        </span>
                                    </td>
                                    <td>@eventItem.targetAmount</td>
                                    <td>@eventItem.maxVolunteer</td>
                                    <td>@eventItem.dateStart</td>
                                    <td>@eventItem.dateEnd</td>
                                    <td>@eventItem.location</td>
                                    <td>
                                        <button class="btn btn-danger btn-sm w-100 delete-event-btn"
                                                data-event-id="@eventItem.eventId">
                                            Delete
                                        </button>
                                    </td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="8" class="text-center">No events available.</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Donation Events Tab -->
        <div class="tab-pane fade" id="donation" role="tabpanel" aria-labelledby="donation-tab">
            <!-- Create Donation Button -->
            <div class="d-flex justify-content-start mb-3">
                <button class="btn btn-success" data-bs-toggle="modal" data-bs-target="#createDonationModal">
                    Create Donation
                </button>
            </div>
            <div class="table-responsive">
                <table class="table table-striped table-hover table-bordered rounded-5">
                    <thead style="background-color: #3087d1; color: white;">
                        <tr>
                            <th>Event Name</th>
                            <th>Description</th>
                            <th>Date Start</th>
                            <th>Date End</th>
                            <th>Location</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Model.listOfDonationEvent != null && Model.listOfDonationEvent.Any())
                        {
                            foreach (var donationItem in Model.listOfDonationEvent)
                            {
                                <tr class="clickable-row-donation" data-donation-id="@donationItem.donationEventId">
                                    <td>@donationItem.donationEventName</td>
                                    <td>
                                        <span class="description" title="@donationItem.donationDescription">
                                            @donationItem.donationDescription
                                        </span>
                                    </td>
                                    <td>@donationItem.dateStart</td>
                                    <td>@donationItem.dateEnd</td>
                                    <td>@donationItem.location</td>
                                    <td>
                                        <button class="btn btn-danger btn-sm w-100">
                                            Delete
                                        </button>
                                    </td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="6" class="text-center">No donation events available.</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Modals -->
<!-- Create Event Modal -->
<div class="modal fade" id="createEventModal" tabindex="-1" aria-labelledby="createEventModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="createEventModalLabel">Create Event</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form>
                    <!-- Updated Event Name -->
                    <div class="mb-3">
                        <label for="eventName" class="form-label">Event Name</label>
                        <input type="text" class="form-control" id="eventName" placeholder="Enter event name" required>
                        <span class="text-danger" id="eventNameError"></span>
                    </div>

                    <!-- Updated Description -->
                    <div class="mb-3">
                        <label for="eventDescription" class="form-label">Description</label>
                        <textarea class="form-control" id="eventDescription" rows="3" placeholder="Enter event description" required></textarea>
                        <span class="text-danger" id="eventDescriptionError"></span>
                    </div>

                    <!-- Allow Donation Switch -->
                    <div class="form-check form-switch mb-3">
                        <input class="form-check-input" type="checkbox" id="allowDonation">
                        <label class="form-check-label" for="allowDonation">Allow Donation</label>
                        <input type="hidden" id="donationAllowed" name="donationAllowed" value="0">
                    </div>

                    <!-- Updated Maximum Volunteers -->
                    <div class="mb-3">
                        <label for="maxVolunteers" class="form-label">Maximum Volunteers</label>
                        <input type="number" class="form-control" id="maxVolunteers" placeholder="Enter maximum number of volunteers" required>
                        <span class="text-danger" id="maxVolunteersError"></span>
                    </div>

                    <!-- Updated Start Date and Time and End Date and Time -->
                    <div class="row">
                        <!-- Start Date -->
                        <div class="col-md-6 mb-3">
                            <label for="dateStart" class="form-label">Start Date and Time</label>
                            <input type="datetime-local" class="form-control" id="dateStart" required>
                            <span class="text-danger" id="dateStartError"></span>
                        </div>
                        <!-- End Date -->
                        <div class="col-md-6 mb-3">
                            <label for="dateEnd" class="form-label">End Date and Time</label>
                            <input type="datetime-local" class="form-control" id="dateEnd" required>
                            <span class="text-danger" id="dateEndError"></span>
                        </div>
                    </div>

                    <!-- Map for Location -->
                    <div class="mb-3">
                        <label for="eventLocation" class="form-label">Location</label>
                        <div id="map" style="height: 300px; border: 1px solid #ddd;">Map of Lapu-Lapu City will appear here.</div>
                    </div>

                    <!-- Input for Location Name -->
                    <div class="mb-3">
                        <label for="locationName" class="form-label">Selected Location</label>
                        <input type="text" class="form-control" id="locationName" placeholder="Click on the map to select a location" readonly>
                        <span class="text-danger" id="locationNameError"></span>
                    </div>

                    <!-- Selected Skills Table -->
                    <div class="mb-3">
                        <label class="form-label">Selected Skills</label>
                        <div class="table-responsive overflow-auto" style="max-height: 150px;">
                            <!-- Limit height to approximately 3 rows -->
                            <table class="table table-striped table-hover table-bordered">
                                <thead>
                                    <tr>
                                        <th>Skill Name</th>
                                        <th>Action</th>
                                    </tr>
                                </thead>
                                <tbody id="selectedSkillsTable">
                                    <!-- Dynamically added rows will appear here -->
                                </tbody>
                            </table>
                            <span class="text-danger" id="selectedSkillsError"></span>
                        </div>
                    </div>

                    <!-- Skills Selection -->
                    <div class="mb-3">
                        <label class="form-label">Skills</label>
                        <div id="skillButtonsContainer">
                            @if (Model.listOfSkills != null && Model.listOfSkills.Any())
                            {
                                foreach (var skillItem in Model.listOfSkills)
                                {
                                    <button type="button" class="btn btn-sm btn-outline-primary m-1 skill-button"
                                            data-skill-id="@skillItem.skillId" data-skill-name="@skillItem.skillName">
                                        @skillItem.skillName
                                    </button>
                                }
                            }
                            else
                            {
                                <p class="text-muted">No skills available.</p>
                            }
                        </div>
                    </div>

                    <!-- Image Upload -->
                    <div class="mb-3">
                        <label for="eventImages" class="form-label">Upload Images</label>
                        <input type="file" class="form-control" id="eventImages" multiple accept="image/*">
                        <span class="text-danger" id="eventImagesError"></span>
                        <div id="imagePreviewContainer" class="d-flex flex-wrap mt-3">
                            <!-- Preview images will be displayed here -->
                        </div>
                    </div>

                    <!-- Submit Button -->
                    <div class="mt-3 text-end">
                        <button type="button" class="btn btn-primary" id="createEventBtn">Create Event</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Create Donation Modal -->
<div class="modal fade" id="createDonationModal" tabindex="-1" aria-labelledby="createDonationModalLabel" aria-hidden="true" data-bs-backdrop="static" data-bs-keyboard="false">
    <div class="modal-dialog modal-lg modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="createDonationModalLabel">Create Donation</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="donationForm" action="/Organization/CreateDonation" method="post" enctype="multipart/form-data">
                    <div class="mb-3">
                        <label for="donationEventName" class="form-label">Donation Name</label>
                        <input type="text" class="form-control" id="donationEventName" name="donationEventName" placeholder="Enter donation name">
                        <span class="error" id="donationNameError"></span>
                    </div>

                    <!-- Added Donation Description -->
                    <div class="mb-3">
                        <label for="donationDescription" class="form-label">Donation Description</label>
                        <textarea class="form-control" id="donationDescription" name="donationDescription" rows="3" placeholder="Enter donation description"></textarea>
                        <span class="error" id="donationDescriptionError"></span>
                    </div>

                    <div class="mb-3 row">
                        <div class="col">
                            <label for="donationDateStart" class="form-label">Start Date</label>
                            <input type="datetime-local" class="form-control" id="donationDateStart" name="dateStart">
                            <span class="error" id="donationDateStartError"></span>
                        </div>
                        <div class="col">
                            <label for="donationDateEnd" class="form-label">End Date</label>
                            <input type="datetime-local" class="form-control" id="donationDateEnd" name="dateEnd">
                            <span class="error" id="donationDateEndError"></span>
                        </div>
                    </div>

                    <!-- Map for Location -->
                    <div class="mb-3">
                        <label for="donationLocation" class="form-label">Location</label>
                        <div id="donationMap" style="height: 300px; border: 1px solid #ddd;">Map of Lapu-Lapu City will appear here.</div>
                    </div>

                    <!-- Input for Location Name -->
                    <div class="mb-3">
                        <input type="text" class="form-control" id="donationLocation" name="location" placeholder="Click on the map to select a location" readonly>
                        <span class="error" id="donationLocationError"></span>
                    </div>

                    <!-- Image Upload with Preview -->
                    <div class="mb-3">
                        <label for="donationImage" class="form-label">Upload Image</label>
                        <input type="file" class="form-control" id="donationImage" name="donationImage" onchange="previewDonationImage()" multiple accept="image/*">
                        <span class="error" id="donationImageError"></span>
                        <div id="donationImagePreview" class="d-flex flex-wrap mt-3">
                            <!-- Preview images will be displayed here -->
                        </div>
                    </div>
                    <button class="btn btn-primary" type="submit">Create Donation</button>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Scripts -->
<script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<style>
    .description {
        display: -webkit-box;
        -webkit-line-clamp: 3;
        -webkit-box-orient: vertical;
        overflow: hidden;
        text-overflow: ellipsis;
        max-height: 4.5em;
        line-height: 1.5em;
        white-space: normal;
        cursor: pointer;
    }
</style>

<script>
    function initializeMap() {
        var validZipCodes = ["6015", "6016"]; // Both valid zip codes for Lapu-Lapu City

        var map = L.map('map').setView([10.3102, 123.9494], 13); // Coordinates for Lapu-Lapu City

        // Add OpenStreetMap tiles
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '© OpenStreetMap contributors'
        }).addTo(map);

        // Add a marker
        var marker = L.marker([10.3102, 123.9494], { draggable: true }).addTo(map)
            .bindPopup('Drag me or click anywhere on the map.')
            .openPopup();

        // Function to fetch and validate location
        function fetchLocationName(lat, lng) {
            var apiUrl = `https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lng}`;
            var locationInput = document.getElementById('locationName');

            fetch(apiUrl)
                .then(response => response.json())
                .then(data => {
                    if (data && data.address) {
                        var displayName = data.display_name;
                        var zipCode = data.address.postcode;

                        if (validZipCodes.includes(zipCode)) {
                            locationInput.value = displayName;
                            locationInput.classList.remove("is-invalid");
                            locationInput.classList.add("is-valid");
                        } else {
                            locationInput.value = ""; // Clear the input
                            locationInput.classList.remove("is-valid");
                            locationInput.classList.add("is-invalid");
                            marker.bindPopup(`Invalid Location: Outside Lapu-Lapu City`).openPopup();
                        }
                    } else {
                        locationInput.value = ""; // Clear the input
                        locationInput.classList.remove("is-valid");
                        locationInput.classList.add("is-invalid");
                    }
                })
                .catch(error => {
                    console.error("Error fetching location:", error);
                    locationInput.value = ""; // Clear the input
                    locationInput.classList.remove("is-valid");
                    locationInput.classList.add("is-invalid");
                });
        }

        // Event listener for map click
        map.on('click', function (e) {
            var lat = e.latlng.lat.toFixed(6); // Latitude
            var lng = e.latlng.lng.toFixed(6); // Longitude

            // Update marker position
            marker.setLatLng(e.latlng).update();

            // Fetch and validate location
            fetchLocationName(lat, lng);
        });

        // Event listener for marker drag
        marker.on('dragend', function (e) {
            var lat = e.target.getLatLng().lat.toFixed(6);
            var lng = e.target.getLatLng().lng.toFixed(6);

            // Fetch and validate location
            fetchLocationName(lat, lng);
        });
    }

    // Initialize the map when the modal is shown
    document.getElementById('createEventModal').addEventListener('shown.bs.modal', function () {
        initializeMap();
    });

    document.addEventListener("DOMContentLoaded", function () {
        const selectedSkillsTable = document.getElementById("selectedSkillsTable");

        // Add event listener to all skill buttons
        document.querySelectorAll(".skill-button").forEach(button => {
            button.addEventListener("click", function () {
                const skillId = this.getAttribute("data-skill-id");
                const skillName = this.getAttribute("data-skill-name");

                // Check if skill already exists in the table
                if (document.querySelector(`tr[data-skill-id="${skillId}"]`)) {
                    return; // Exit if skill already exists
                }

                // Disable the button
                this.disabled = true;
                this.classList.add("disabled");

                // Create a new row for the selected skill
                const row = document.createElement("tr");
                row.setAttribute("data-skill-id", skillId);

                // Add skill name cell
                const nameCell = document.createElement("td");
                nameCell.classList.add("skill-name");
                nameCell.textContent = skillName;

                // Add action cell with remove button
                const actionCell = document.createElement("td");
                const removeButton = document.createElement("button");
                removeButton.type = "button";
                removeButton.classList.add("btn", "btn-danger", "btn-sm", "remove-skill-btn");
                removeButton.textContent = "Remove";

                // Remove row and re-enable button on click
                removeButton.addEventListener("click", function () {
                    row.remove();
                    const correspondingButton = document.querySelector(`.skill-button[data-skill-id="${skillId}"]`);
                    if (correspondingButton) {
                        correspondingButton.disabled = false;
                        correspondingButton.classList.remove("disabled");
                    }
                });

                actionCell.appendChild(removeButton);

                // Append all cells to the row
                row.appendChild(nameCell);
                row.appendChild(actionCell);

                // Append the new row to the table
                selectedSkillsTable.appendChild(row);
            });
        });
    });

    document.addEventListener("DOMContentLoaded", function () {
        const eventImagesInput = document.getElementById("eventImages");
        const imagePreviewContainer = document.getElementById("imagePreviewContainer");

        // Event listener for file input change
        eventImagesInput.addEventListener("change", function () {
            // Clear the previous previews
            imagePreviewContainer.innerHTML = "";

            // Get the selected files
            const files = Array.from(eventImagesInput.files);

            files.forEach((file) => {
                // Ensure the file is an image
                if (file.type.startsWith("image/")) {
                    const reader = new FileReader();

                    // On load, create an image preview
                    reader.onload = function (e) {
                        const imageWrapper = document.createElement("div");
                        imageWrapper.classList.add("position-relative", "m-2");

                        const image = document.createElement("img");
                        image.src = e.target.result;
                        image.alt = file.name;
                        image.classList.add("img-thumbnail", "me-2");
                        image.style.width = "120px";
                        image.style.height = "120px";

                        // Add a remove button for the preview
                        const removeButton = document.createElement("button");
                        removeButton.classList.add("btn", "btn-sm", "btn-danger", "position-absolute", "top-0", "end-0");
                        removeButton.textContent = "×";
                        removeButton.addEventListener("click", function () {
                            // Remove the preview image and corresponding file from the input
                            imageWrapper.remove();
                            removeFile(file);
                        });

                        imageWrapper.appendChild(image);
                        imageWrapper.appendChild(removeButton);
                        imagePreviewContainer.appendChild(imageWrapper);
                    };

                    reader.readAsDataURL(file);
                }
            });

            // Function to remove a file from the input
            function removeFile(fileToRemove) {
                const dataTransfer = new DataTransfer();
                files.forEach((file) => {
                    if (file !== fileToRemove) {
                        dataTransfer.items.add(file);
                    }
                });
                eventImagesInput.files = dataTransfer.files;
            }
        });
    });

    document.addEventListener("DOMContentLoaded", () => {
        const allowDonationSwitch = document.getElementById("allowDonation");
        const donationAllowedInput = document.getElementById("donationAllowed");

        // Update hidden input based on switch state
        allowDonationSwitch.addEventListener("change", function () {
            donationAllowedInput.value = this.checked ? 1 : 0;
        });

        // Event form inputs
        const eventForm = document.getElementById("createEventModal");
        const eventName = document.getElementById("eventName");
        const eventDescription = document.getElementById("eventDescription");
        const maxVolunteers = document.getElementById("maxVolunteers");
        const dateStart = document.getElementById("dateStart");
        const dateEnd = document.getElementById("dateEnd");
        const locationName = document.getElementById("locationName");
        const selectedSkillsTable = document.getElementById("selectedSkillsTable");
        const eventImagesInput = document.getElementById("eventImages");

        // Error elements
        const eventNameError = document.getElementById("eventNameError");
        const eventDescriptionError = document.getElementById("eventDescriptionError");
        const maxVolunteersError = document.getElementById("maxVolunteersError");
        const dateStartError = document.getElementById("dateStartError");
        const dateEndError = document.getElementById("dateEndError");
        const locationNameError = document.getElementById("locationNameError");
        const selectedSkillsError = document.getElementById("selectedSkillsError");
        const eventImagesError = document.getElementById("eventImagesError");

        // Utility functions
        function isEmpty(value) {
            return !value.trim();
        }

        function showError(input, errorElement, message) {
            errorElement.textContent = message;
            input.classList.add("is-invalid");
            input.classList.remove("is-valid");
        }

        function clearError(input, errorElement) {
            errorElement.textContent = "";
            input.classList.remove("is-invalid");
            input.classList.add("is-valid");
        }

        // Real-time validation
        eventName.addEventListener("input", () => {
            if (isEmpty(eventName.value)) {
                showError(eventName, eventNameError, "Event name is required.");
            } else {
                clearError(eventName, eventNameError);
            }
        });

        eventDescription.addEventListener("input", () => {
            if (isEmpty(eventDescription.value)) {
                showError(eventDescription, eventDescriptionError, "Event description is required.");
            } else {
                clearError(eventDescription, eventDescriptionError);
            }
        });

        maxVolunteers.addEventListener("input", () => {
            if (isEmpty(maxVolunteers.value) || maxVolunteers.value <= 0) {
                showError(maxVolunteers, maxVolunteersError, "Maximum volunteers must be greater than 0.");
            } else {
                clearError(maxVolunteers, maxVolunteersError);
            }
        });

        dateStart.addEventListener("input", () => {
            const now = new Date();
            const startDate = new Date(dateStart.value);
            if (!dateStart.value || startDate <= now) {
                showError(dateStart, dateStartError, "Start date must be in the future.");
            } else {
                clearError(dateStart, dateStartError);
            }
        });

        dateEnd.addEventListener("input", () => {
            const startDate = new Date(dateStart.value);
            const endDate = new Date(dateEnd.value);
            if (!dateEnd.value || endDate <= startDate) {
                showError(dateEnd, dateEndError, "End date must be after the start date.");
            } else {
                clearError(dateEnd, dateEndError);
            }
        });

        locationName.addEventListener("input", () => {
            if (isEmpty(locationName.value)) {
                showError(locationName, locationNameError, "Location is required.");
            } else {
                clearError(locationName, locationNameError);
            }
        });

        eventImagesInput.addEventListener("change", () => {
            if (eventImagesInput.files.length === 0) {
                showError(eventImagesInput, eventImagesError, "At least one image is required.");
            } else {
                clearError(eventImagesInput, eventImagesError);
            }
        });

        // Form submission validation
        document.getElementById("createEventBtn").addEventListener("click", () => {
            let isValid = true;

            // Validate Event Name
            if (isEmpty(eventName.value)) {
                showError(eventName, eventNameError, "Event name is required.");
                isValid = false;
            } else {
                clearError(eventName, eventNameError);
            }

            // Validate Event Description
            if (isEmpty(eventDescription.value)) {
                showError(eventDescription, eventDescriptionError, "Event description is required.");
                isValid = false;
            } else {
                clearError(eventDescription, eventDescriptionError);
            }

            // Validate Maximum Volunteers
            if (isEmpty(maxVolunteers.value) || maxVolunteers.value <= 0) {
                showError(maxVolunteers, maxVolunteersError, "Maximum volunteers must be greater than 0.");
                isValid = false;
            } else {
                clearError(maxVolunteers, maxVolunteersError);
            }

            // Validate Dates
            const now = new Date();
            const startDate = new Date(dateStart.value);
            const endDate = new Date(dateEnd.value);

            if (!dateStart.value || startDate <= now) {
                showError(dateStart, dateStartError, "Start date must be in the future.");
                isValid = false;
            } else {
                clearError(dateStart, dateStartError);
            }

            if (!dateEnd.value || endDate <= startDate) {
                showError(dateEnd, dateEndError, "End date must be after the start date.");
                isValid = false;
            } else {
                clearError(dateEnd, dateEndError);
            }

            // Validate Location
            if (isEmpty(locationName.value)) {
                showError(locationName, locationNameError, "Location is required.");
                isValid = false;
            } else {
                clearError(locationName, locationNameError);
            }

            // Validate Selected Skills
            if (selectedSkillsTable.children.length === 0) {
                selectedSkillsError.textContent = "At least one skill must be selected.";
                isValid = false;
            } else {
                selectedSkillsError.textContent = "";
            }

            // Validate Images
            if (eventImagesInput.files.length === 0) {
                showError(eventImagesInput, eventImagesError, "At least one image is required.");
                isValid = false;
            } else {
                clearError(eventImagesInput, eventImagesError);
            }

            // If valid, submit the form
            if (isValid) {
                const formData = new FormData();

                // Collect form data
                formData.append("eventDto.eventTitle", eventName.value);
                formData.append("eventDto.eventDescription", eventDescription.value);
                formData.append("eventDto.maxVolunteer", maxVolunteers.value);
                formData.append("eventDto.dateStart", dateStart.value);
                formData.append("eventDto.dateEnd", dateEnd.value);
                formData.append("eventDto.location", locationName.value);

                // Pass the donationAllowed value
                formData.append("donationAllowed", donationAllowedInput.value);

                // Collect selected skills
                document.querySelectorAll("#selectedSkillsTable tr").forEach((row, index) => {
                    const skillId = row.getAttribute("data-skill-id");
                    const skillName = row.querySelector(".skill-name").textContent.trim();

                    formData.append(`skills[${index}].Id`, skillId);
                    formData.append(`skills[${index}].Name`, skillName);
                });

                // Collect uploaded images
                Array.from(eventImagesInput.files).forEach((file) => {
                    formData.append("eventImages", file);
                });

                // Send form data to server
                fetch("/Organization/CreateEvent", {
                    method: "POST",
                    body: formData,
                })
                    .then((response) => response.json())
                    .then((data) => {
                        if (data.success) {
                            Swal.fire({
                                icon: "success",
                                title: "Event Created",
                                text: "Your event has been created successfully!",
                                confirmButtonText: "OK",
                            }).then(() => {
                                location.reload();
                            });
                        } else {
                            Swal.fire({
                                icon: "error",
                                title: "Error",
                                text: data.message || "An error occurred while creating the event.",
                                confirmButtonText: "OK",
                            });
                        }
                    })
                    .catch((error) => {
                        console.error("Error:", error);
                        Swal.fire({
                            icon: "error",
                            title: "Error",
                            text: "An unexpected error occurred. Please try again later.",
                            confirmButtonText: "OK",
                        });
                    });
            }
        });
    });


    function initializeDonationMap() {
        var validZipCodes = ["6015", "6016"]; // Valid zip codes for Lapu-Lapu City

        var map = L.map('donationMap').setView([10.3102, 123.9494], 13); // Coordinates for Lapu-Lapu City

        // Add OpenStreetMap tiles
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '© OpenStreetMap contributors'
        }).addTo(map);

        // Add a marker
        var marker = L.marker([10.3102, 123.9494], { draggable: true }).addTo(map)
            .bindPopup('Drag me or click anywhere on the map.')
            .openPopup();

        // Function to fetch and validate location
        function fetchDonationLocationName(lat, lng) {
            var apiUrl = `https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lng}`;
            var donationLocationInput = document.getElementById('donationLocation');

            fetch(apiUrl)
                .then(response => response.json())
                .then(data => {
                    if (data && data.address) {
                        var displayName = data.display_name;
                        var zipCode = data.address.postcode;

                        if (validZipCodes.includes(zipCode)) {
                            donationLocationInput.value = displayName;
                            donationLocationInput.classList.remove("is-invalid");
                            donationLocationInput.classList.add("is-valid");
                        } else {
                            donationLocationInput.value = ""; // Clear the input
                            donationLocationInput.classList.remove("is-valid");
                            donationLocationInput.classList.add("is-invalid");
                            marker.bindPopup(`Invalid Location: Outside Lapu-Lapu City`).openPopup();
                        }
                    } else {
                        donationLocationInput.value = ""; // Clear the input
                        donationLocationInput.classList.remove("is-valid");
                        donationLocationInput.classList.add("is-invalid");
                    }
                })
                .catch(error => {
                    console.error("Error fetching location:", error);
                    donationLocationInput.value = ""; // Clear the input
                    donationLocationInput.classList.remove("is-valid");
                    donationLocationInput.classList.add("is-invalid");
                });
        }

        // Event listener for map click
        map.on('click', function (e) {
            var lat = e.latlng.lat.toFixed(6); // Latitude
            var lng = e.latlng.lng.toFixed(6); // Longitude

            marker.setLatLng(e.latlng).update();
            fetchDonationLocationName(lat, lng);
        });

        // Event listener for marker drag
        marker.on('dragend', function (e) {
            var lat = e.target.getLatLng().lat.toFixed(6);
            var lng = e.target.getLatLng().lng.toFixed(6);

            fetchDonationLocationName(lat, lng);
        });
    }

    // Initialize the map when the donation modal is shown
    document.getElementById('createDonationModal').addEventListener('shown.bs.modal', function () {
        initializeDonationMap();
    });

    function previewDonationImage() {
        const donationImageInput = document.getElementById("donationImage");
        const donationImagePreview = document.getElementById("donationImagePreview");

        // Clear existing previews
        donationImagePreview.innerHTML = "";

        // Get the selected files
        const files = Array.from(donationImageInput.files);

        files.forEach((file) => {
            // Ensure the file is an image
            if (file.type.startsWith("image/")) {
                const reader = new FileReader();

                reader.onload = function (e) {
                    // Create a container for the image and remove button
                    const imageWrapper = document.createElement("div");
                    imageWrapper.classList.add("position-relative", "m-2");

                    // Create the image element
                    const image = document.createElement("img");
                    image.src = e.target.result;
                    image.alt = file.name;
                    image.classList.add("img-thumbnail", "me-2");
                    image.style.width = "120px";
                    image.style.height = "120px";

                    // Create a remove button for each image
                    const removeButton = document.createElement("button");
                    removeButton.classList.add("btn", "btn-sm", "btn-danger", "position-absolute", "top-0", "end-0");
                    removeButton.textContent = "×";
                    removeButton.addEventListener("click", () => {
                        // Remove the preview image and file from the input
                        imageWrapper.remove();
                        removeDonationFile(file);
                    });

                    // Append the image and remove button to the wrapper
                    imageWrapper.appendChild(image);
                    imageWrapper.appendChild(removeButton);

                    // Append the wrapper to the preview container
                    donationImagePreview.appendChild(imageWrapper);
                };

                // Read the file as a Data URL
                reader.readAsDataURL(file);
            }
        });

        // Function to remove a file from the input
        function removeDonationFile(fileToRemove) {
            const dataTransfer = new DataTransfer();
            files.forEach((file) => {
                if (file !== fileToRemove) {
                    dataTransfer.items.add(file);
                }
            });
            donationImageInput.files = dataTransfer.files;
        }
    }

    document.addEventListener("DOMContentLoaded", () => {
        const donationForm = document.getElementById("donationForm");

        // Input fields
        const donationEventName = document.getElementById("donationEventName");
        const donationDescription = document.getElementById("donationDescription");
        const donationDateStart = document.getElementById("donationDateStart");
        const donationDateEnd = document.getElementById("donationDateEnd");
        const donationLocation = document.getElementById("donationLocation");
        const donationImage = document.getElementById("donationImage");

        // Error elements
        const donationEventNameError = document.getElementById("donationNameError");
        const donationDescriptionError = document.getElementById("donationDescriptionError");
        const donationDateStartError = document.getElementById("donationDateStartError");
        const donationDateEndError = document.getElementById("donationDateEndError");
        const donationLocationError = document.getElementById("donationLocationError");
        const donationImageError = document.getElementById("donationImageError");

        // Form submission validation
        donationForm.addEventListener("submit", (event) => {
            event.preventDefault(); // Prevent default form submission
            let isValid = true;

            // Validate Donation Name
            if (donationEventName.value.trim() === "") {
                donationEventNameError.textContent = "Donation Name is required.";
                donationEventName.classList.add("is-invalid");
                donationEventName.classList.remove("is-valid");
                isValid = false;
            } else {
                donationEventNameError.textContent = "";
                donationEventName.classList.remove("is-invalid");
                donationEventName.classList.add("is-valid");
            }

            // Validate Donation Description
            if (donationDescription.value.trim() === "") {
                donationDescriptionError.textContent = "Donation Description is required.";
                donationDescription.classList.add("is-invalid");
                donationDescription.classList.remove("is-valid");
                isValid = false;
            } else {
                donationDescriptionError.textContent = "";
                donationDescription.classList.remove("is-invalid");
                donationDescription.classList.add("is-valid");
            }

            // Validate Start Date
            const now = new Date();
            const startDate = new Date(donationDateStart.value);
            if (!donationDateStart.value || startDate <= now) {
                donationDateStartError.textContent = "Start Date must be in the future.";
                donationDateStart.classList.add("is-invalid");
                donationDateStart.classList.remove("is-valid");
                isValid = false;
            } else {
                donationDateStartError.textContent = "";
                donationDateStart.classList.remove("is-invalid");
                donationDateStart.classList.add("is-valid");
            }

            // Validate End Date
            const endDate = new Date(donationDateEnd.value);
            if (!donationDateEnd.value || endDate <= startDate) {
                donationDateEndError.textContent = "End Date must be after Start Date.";
                donationDateEnd.classList.add("is-invalid");
                donationDateEnd.classList.remove("is-valid");
                isValid = false;
            } else {
                donationDateEndError.textContent = "";
                donationDateEnd.classList.remove("is-invalid");
                donationDateEnd.classList.add("is-valid");
            }

            // Validate Location
            if (donationLocation.value.trim() === "") {
                donationLocationError.textContent = "Location is required. Please select a location.";
                donationLocation.classList.add("is-invalid");
                donationLocation.classList.remove("is-valid");
                isValid = false;
            } else {
                donationLocationError.textContent = "";
                donationLocation.classList.remove("is-invalid");
                donationLocation.classList.add("is-valid");
            }

            // Validate Image Upload
            if (donationImage.files.length === 0) {
                donationImageError.textContent = "Please upload at least one image.";
                donationImage.classList.add("is-invalid");
                donationImage.classList.remove("is-valid");
                isValid = false;
            } else {
                donationImageError.textContent = "";
                donationImage.classList.remove("is-invalid");
                donationImage.classList.add("is-valid");
            }

            // If all validations pass, proceed with AJAX submission
            if (isValid) {
                const formData = new FormData(donationForm);

                fetch(donationForm.action, {
                    method: "POST",
                    body: formData
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            Swal.fire({
                                icon: "success",
                                title: "Success",
                                text: data.message || "Donation created successfully!",
                                confirmButtonText: "OK"
                            }).then(() => {
                                // Reload the page or redirect to another page
                                location.reload();
                            });
                        } else {
                            Swal.fire({
                                icon: "error",
                                title: "Error",
                                text: data.message || "An error occurred. Please try again.",
                                confirmButtonText: "OK"
                            });
                        }
                    })
                    .catch(error => {
                        console.error("Error:", error);
                        Swal.fire({
                            icon: "error",
                            title: "Error",
                            text: "An unexpected error occurred. Please try again later.",
                            confirmButtonText: "OK"
                        });
                    });
            }
        });

        // Real-time validation for Donation Name
        donationEventName.addEventListener("input", () => {
            if (donationEventName.value.trim() === "") {
                donationEventNameError.textContent = "Donation Name is required.";
                donationEventName.classList.add("is-invalid");
                donationEventName.classList.remove("is-valid");
            } else {
                donationEventNameError.textContent = "";
                donationEventName.classList.remove("is-invalid");
                donationEventName.classList.add("is-valid");
            }
        });

        // Real-time validation for Donation Description
        donationDescription.addEventListener("input", () => {
            if (donationDescription.value.trim() === "") {
                donationDescriptionError.textContent = "Donation Description is required.";
                donationDescription.classList.add("is-invalid");
                donationDescription.classList.remove("is-valid");
            } else {
                donationDescriptionError.textContent = "";
                donationDescription.classList.remove("is-invalid");
                donationDescription.classList.add("is-valid");
            }
        });

        // Real-time validation for Start Date
        donationDateStart.addEventListener("input", () => {
            const now = new Date();
            const startDate = new Date(donationDateStart.value);
            if (!donationDateStart.value || startDate <= now) {
                donationDateStartError.textContent = "Start Date must be in the future.";
                donationDateStart.classList.add("is-invalid");
                donationDateStart.classList.remove("is-valid");
            } else {
                donationDateStartError.textContent = "";
                donationDateStart.classList.remove("is-invalid");
                donationDateStart.classList.add("is-valid");
            }
        });

        // Real-time validation for End Date
        donationDateEnd.addEventListener("input", () => {
            const startDate = new Date(donationDateStart.value);
            const endDate = new Date(donationDateEnd.value);
            if (!donationDateEnd.value || endDate <= startDate) {
                donationDateEndError.textContent = "End Date must be after Start Date.";
                donationDateEnd.classList.add("is-invalid");
                donationDateEnd.classList.remove("is-valid");
            } else {
                donationDateEndError.textContent = "";
                donationDateEnd.classList.remove("is-invalid");
                donationDateEnd.classList.add("is-valid");
            }
        });

        // Real-time validation for Location
        donationLocation.addEventListener("input", () => {
            if (donationLocation.value.trim() === "") {
                donationLocationError.textContent = "Location is required. Please select a location.";
                donationLocation.classList.add("is-invalid");
                donationLocation.classList.remove("is-valid");
            } else {
                donationLocationError.textContent = "";
                donationLocation.classList.remove("is-invalid");
                donationLocation.classList.add("is-valid");
            }
        });

        // Real-time validation for Image Upload
        donationImage.addEventListener("change", () => {
            if (donationImage.files.length === 0) {
                donationImageError.textContent = "Please upload at least one image.";
                donationImage.classList.add("is-invalid");
                donationImage.classList.remove("is-valid");
            } else {
                donationImageError.textContent = "";
                donationImage.classList.remove("is-invalid");
                donationImage.classList.add("is-valid");
            }
        });
    });
    document.addEventListener("DOMContentLoaded", () => {
        // Add event listener to all delete buttons
        document.querySelectorAll(".delete-event-btn").forEach((button) => {
            button.addEventListener("click", function (event) {
                // Prevent the row's click event
                event.stopPropagation();

                const eventId = this.getAttribute("data-event-id");

                // Confirm deletion
                Swal.fire({
                    title: "Are you sure?",
                    text: "You won't be able to undo this!",
                    icon: "warning",
                    showCancelButton: true,
                    confirmButtonColor: "#d33",
                    cancelButtonColor: "#3085d6",
                    confirmButtonText: "Yes, delete it!",
                    cancelButtonText: "Cancel",
                }).then((result) => {
                    if (result.isConfirmed) {
                        // Send AJAX request to delete the event
                        fetch(`/Organization/Delete`, {
                            method: "POST",
                            headers: {
                                "Content-Type": "application/json",
                                "X-Requested-With": "XMLHttpRequest", // For CSRF validation if needed
                            },
                            body: JSON.stringify({ eventId: parseInt(eventId) }),
                        })
                            .then((response) => response.json())
                            .then((data) => {
                                if (data.success) {
                                    Swal.fire({
                                        icon: "success",
                                        title: "Deleted!",
                                        text: data.message || "The event has been deleted.",
                                        confirmButtonText: "OK",
                                    }).then(() => {
                                        // Remove the deleted event row from the table
                                        const row = button.closest("tr");
                                        if (row) row.remove();
                                    });
                                } else {
                                    Swal.fire({
                                        icon: "error",
                                        title: "Error!",
                                        text: data.message || "An error occurred while deleting the event.",
                                        confirmButtonText: "OK",
                                    });
                                }
                            })
                            .catch((error) => {
                                console.error("Error:", error);
                                Swal.fire({
                                    icon: "error",
                                    title: "Error!",
                                    text: "An unexpected error occurred. Please try again later.",
                                    confirmButtonText: "OK",
                                });
                            });
                    }
                });
            });
        });
    });

    document.addEventListener("DOMContentLoaded", function () {
        // Get all rows with the clickable-row class
        const rows = document.querySelectorAll(".clickable-row");

        rows.forEach(row => {
            row.addEventListener("click", function () {
                const eventId = this.getAttribute("data-event-id");
                if (eventId) {
                    // Redirect to the Details action
                    window.location.href = `/Organization/Details/${eventId}`;
                }
            });
        });
    });

    document.addEventListener('DOMContentLoaded', function () {
        // Add click event listener to all rows with the class clickable-row-donation
        document.querySelectorAll('.clickable-row-donation').forEach(row => {
            row.addEventListener('click', function () {
                const donationEventId = this.getAttribute('data-donation-id');
                if (donationEventId) {
                    // Redirect to the DonationDetails action with the donationEventId as a query parameter
                    window.location.href = `/Organization/DonationDetails?donationEventId=${donationEventId}`;
                }
            });
        });
    });
</script>
